<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>シリアライズ on Little by little and bit by bit - マイペースにこつこつと</title>
    <link>https://takuto-n.github.io/tags/%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%A9%E3%82%A4%E3%82%BA/</link>
    <description>Recent content in シリアライズ on Little by little and bit by bit - マイペースにこつこつと</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <copyright>&lt;a href=&#34;https://www.instagram.com/takuto_no&#34;&gt;takuto-n&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 07 Mar 2020 00:49:15 +0900</lastBuildDate>
    <atom:link href="https://takuto-n.github.io/tags/%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%A9%E3%82%A4%E3%82%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Effective Java 3rd [Chapter 12] - シリアライズ</title>
      <link>https://takuto-n.github.io/post/20191109-effective-java-3rd-12/</link>
      <pubDate>Sat, 07 Mar 2020 00:49:15 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20191109-effective-java-3rd-12/</guid>
      <description>&lt;h1 id=&#34;シリアライズ&#34;&gt;シリアライズ&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/Effective-Java-%E7%AC%AC3%E7%89%88-%E3%82%B8%E3%83%A7%E3%82%B7%E3%83%A5%E3%82%A2%E3%83%BB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF-ebook/dp/B07RHX1K53/ref=pd_sim_351_1/356-5415616-7898815?_encoding=UTF8&amp;amp;pd_rd_i=B07RHX1K53&amp;amp;pd_rd_r=383aeb39-63f8-4e11-8223-4445dcae3221&amp;amp;pd_rd_w=6vTRe&amp;amp;pd_rd_wg=Sdyd4&amp;amp;pf_rd_p=2e61d088-fdb1-443a-804b-afc322ee8b23&amp;amp;pf_rd_r=70HV42TR992CCFQP7KDA&amp;amp;psc=1&amp;amp;refRID=70HV42TR992CCFQP7KDA&#34;&gt;Effective Java 第 3 版&lt;/a&gt;の個人的メモ&lt;/p&gt;&#xA;&lt;!-- vscode-markdown-toc --&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#85Java&#34;&gt;項目 85 Java のシリアライズよりも代替手段を選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#86Serializable&#34;&gt;項目 86 Serializable を細心の注意を払って実装する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#87&#34;&gt;項目 87 カスタムシリアライズ形式の使用を検討する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#88readObject&#34;&gt;項目 88 防御的に readObject メソッドを書く&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#89readResolveenum&#34;&gt;項目 89 インスタンス制御に対しては、readResolve より enum 型を選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#90&#34;&gt;項目 90 シリアライズされたインスタンスの代わりに、シリアライズ・プロキシを検討する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- vscode-markdown-toc-config&#xA;&#x9;numbering=true&#xA;&#x9;autoSave=true&#xA;&#x9;/vscode-markdown-toc-config --&gt;&#xA;&lt;!-- /vscode-markdown-toc --&gt;&#xA;&lt;h2 id=&#34;1-a-name85javaa項目-85-java-のシリアライズよりも代替手段を選ぶ&#34;&gt;1. &lt;a name=&#39;85Java&#39;&gt;&lt;/a&gt;項目 85 Java のシリアライズよりも代替手段を選ぶ&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-a-namea結論&#34;&gt;1.1. &lt;a name=&#39;&#39;&gt;&lt;/a&gt;結論&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;シリアライズは使うべきでない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;シリアライズは脆弱でリモートコード実行(RCE)やDoS攻撃などの攻撃の弱点となってしまうから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;代替手段としてはJSONやProtobufなどのような他の手段を使うべし&#xA;&lt;ul&gt;&#xA;&lt;li&gt;データフォーマットが定まっていてシリアライズよりましだから？&#xA;&lt;ul&gt;&#xA;&lt;li&gt;XML bombもある。Jsonハイジャックもある。&lt;/li&gt;&#xA;&lt;li&gt;ユーザコードを叩くかどうかの違い？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;シリアライズが避けられない場合でも、信頼できないデータはデシリアライズするべきでない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;信頼できないデータは攻撃対象となっている可能性があるから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;シリアライズが避けられないかつ信頼できないデータをデシリアライズしなければならない場合は、フィルタリングをするべし&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;12-a-name-1aシリアライズの脆弱性&#34;&gt;1.2. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;シリアライズの脆弱性&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;シリアライズは脆弱である&#xA;&lt;ul&gt;&#xA;&lt;li&gt;理由&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://codezine.jp/article/detail/9150&#34;&gt;Apache Commons Collectionsの脆弱性解説 (1/3)：CodeZine（コードジン）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.tokumaru.org/2017/09/introduction-to-object-injection.html&#34;&gt;安全でないデシリアライゼーション(Insecure Deserialization)入門 | 徳丸浩の日記&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ガジェット、ガジェットチェーンによって任意のネイティブコードが実行できてしまうことがある&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Javaのシリアライズ可能な型を持つメソッドをガジェット、ガジェットの組み合わせをガジェットチェーンとよぶ&lt;/li&gt;&#xA;&lt;li&gt;実際にガジェットチェーンを用いて任意のネイティブコードが実行する実証実験された&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.trendmicro.co.jp/archives/12577&#34;&gt;主要Javaアプリケーションサーバに影響するJavaライブラリの脆弱性を正しく理解する | トレンドマイクロ セキュリティブログ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/frohoff/ysoserial&#34;&gt;GitHub - frohoff/ysoserial: A proof-of-concept tool for generating payloads that exploit unsafe Java object deserialization.&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring 4.1.4でも実証実験された&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;デシリアライゼーションボムによってDoS攻撃ができてしまうことがある&#xA;&lt;ul&gt;&#xA;&lt;li&gt;デシリアライゼーションボムは、インスタンスのディシリアライズをする場合に、そのフィールドや要素のハッシュコードを計算する必要があることを悪用して、例えば深い入れ子構造になっているHashSetインスタンスなどを作成してデシリアライズさせることで、莫大な計算時間を掛けさせる攻撃手法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;13-a-name-1aデシリアライズ時のフィルタリング&#34;&gt;1.3. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;デシリアライズ時のフィルタリング&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;デシリアライズ時のフィルタリングには&lt;a href=&#34;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/ObjectInputFilter.html&#34;&gt;ObjectInputFilter (Java SE 11 &amp;amp; JDK 11 )&lt;/a&gt;を使うべし&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ホワイトリスト&lt;/li&gt;&#xA;&lt;li&gt;Java 9から導入されたが、6,7,8にもバックポートされている&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/jp/news/2017/03/deserialise-filter-backport/&#34;&gt;オブジェクトのデシリアライゼーションフィルタがJava 9からバックポートされる&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;14-a-name-1a余談&#34;&gt;1.4. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;余談&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;シリアライズの扱いずらさ&#xA;&lt;ul&gt;&#xA;&lt;li&gt;送信元と送信先が同じオブジェクトを持たなければならない&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;どういう局面でシリアライズを使うでしょうか&#xA;&lt;ul&gt;&#xA;&lt;li&gt;セッション&lt;/li&gt;&#xA;&lt;li&gt;システム内通信&#xA;&lt;ul&gt;&#xA;&lt;li&gt;EJB(Enterprise Java Bean)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;EJBとは？という方は&lt;a href=&#34;https://www.atmarkit.co.jp/fjava/keyword/jkey/jkey03.html&#34;&gt;こちら&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-a-name86serializablea項目-86-serializable-を細心の注意を払って実装する&#34;&gt;2. &lt;a name=&#39;86Serializable&#39;&gt;&lt;/a&gt;項目 86 Serializable を細心の注意を払って実装する&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-a-name-1a結論&#34;&gt;2.1. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;結論&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Serializableインターフェースは軽く考えて実装するべきではない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;以下の3つのコストがかかってしまうから&#xA;&lt;ul&gt;&#xA;&lt;li&gt;リリース後のクラスの実装の変更に対する柔軟性の低下&lt;/li&gt;&#xA;&lt;li&gt;バグやセキュリティホールの可能性の増大&lt;/li&gt;&#xA;&lt;li&gt;テストの負荷の増大&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;継承するために設計されたクラスとインタフェースではSerializableを実装・拡張するべきでない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;サブクラスの実装に手間がかかるから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;22-a-nameserializable3aserializable実装に伴う3つのコスト&#34;&gt;2.2. &lt;a name=&#39;Serializable3&#39;&gt;&lt;/a&gt;Serializable実装に伴う3つのコスト&lt;/h3&gt;&#xA;&lt;h4 id=&#34;221-a-name-1aリリース後のクラスの実装の変更に対する柔軟性の低下&#34;&gt;2.2.1. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;リリース後のクラスの実装の変更に対する柔軟性の低下&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Serializableを実装したクラスを一旦リリースしてしまうと、その実装を変更することは容易ではない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;クラスをシリアライズ可能にすると、そのシリアライズ形式がクラスの公開APIの一部となり、シリアライズ形式を永久にサポートし続ける必要があるから&#xA;&lt;ul&gt;&#xA;&lt;li&gt;デフォルトのシリアライズ形式の場合は、 privateフィールドも公開されてしまう&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;serialVersionUIDを明示的に指定しない場合は、コンパイラはクラス名やクラスが実装しているインタフェース名、publicとprotectedのメンバからserialVersionUIDを生成されるするので、メソッドを一つ追加しただけでserialVersionUIDが変更され、互換性が失われるから。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;javaバージョンによって生成されるserialVersionUIDが違う可能性あり。だから指定しましょう&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;222-a-name-1aバグやセキュリティホールの可能性の増大&#34;&gt;2.2.2. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;バグやセキュリティホールの可能性の増大&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;バグの可能性が増大する理由は、デシリアライズ時のオブジェクトは通常のコンストラクタを使わずに生成されるため、コンストラクタで保証される不変式が保証されないから。&lt;/li&gt;&#xA;&lt;li&gt;セキュリティホールについては、項目85参照&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;223-a-name-1aテストの負荷の増大&#34;&gt;2.2.3. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;テストの負荷の増大&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;新たなリリースのインスタンスをシリアライズし、古いリリースのデシリアライズ処理でインスタンスが復元できるを確認する必要がある。 また逆に、古いリリースのインスタンスをシリアライズし、新しいリリースのデシリアライズ処理で復元できるかも確認する必要がある&lt;/li&gt;&#xA;&lt;li&gt;これらのテストは、新旧のインスタンス間でシリアライズ/デシリアライズできるかというバイナリ互換性に加えて、 動作が意図しているものかどうかというセマンティクス互換性も検査する必要がある&#xA;&lt;ul&gt;&#xA;&lt;li&gt;互換の一覧&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ソース互換&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ソースをコンパイルできる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;バイナリ互換&#xA;&lt;ul&gt;&#xA;&lt;li&gt;バイナリを実行できる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;動作の互換性（≒セマンティクス互換性）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;動作が同じ&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;224-a-nameserializablea継承するために設計されたクラスインターフェースに対するserializable実装&#34;&gt;2.2.4. &lt;a name=&#39;Serializable&#39;&gt;&lt;/a&gt;継承するために設計されたクラス・インターフェースに対するSerializable実装&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;継承するために設計されたクラスとインタフェースではSerializableを実装・拡張するべきでない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;サブクラスの実装に手間がかかるから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ただし上記には例外があり、「例えば、全ての参加者がSerializableを実装しなければならない何らかのフレームワークに参加するためにクラスやインターフェースが主に存在している場合」は破ってもいい&#xA;&lt;ul&gt;&#xA;&lt;li&gt;例えば、ThrowableはSerializableを実装しているので、リモートメソッド呼び出し(RMI)からの例外を、クライアントに渡せる&lt;/li&gt;&#xA;&lt;li&gt;Component、HttpServletもSerializableを実装している&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-a-name87a項目-87-カスタムシリアライズ形式の使用を検討する&#34;&gt;3. &lt;a name=&#39;87&#39;&gt;&lt;/a&gt;項目 87 カスタムシリアライズ形式の使用を検討する&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-a-name-1a結論&#34;&gt;3.1. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;結論&lt;/h3&gt;&#xA;&lt;p&gt;Javaにおけるシリアライズの実装方法は2通りある。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
