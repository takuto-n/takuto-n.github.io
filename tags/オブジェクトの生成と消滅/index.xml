<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>オブジェクトの生成と消滅 on Little by little and bit by bit - マイペースにこつこつと</title>
    <link>https://takuto-n.github.io/tags/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E7%94%9F%E6%88%90%E3%81%A8%E6%B6%88%E6%BB%85/</link>
    <description>Recent content in オブジェクトの生成と消滅 on Little by little and bit by bit - マイペースにこつこつと</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <copyright>&lt;a href=&#34;https://www.instagram.com/takuto_no&#34;&gt;takuto-n&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 29 Sep 2019 01:49:02 +0900</lastBuildDate>
    <atom:link href="https://takuto-n.github.io/tags/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E7%94%9F%E6%88%90%E3%81%A8%E6%B6%88%E6%BB%85/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Effective Java 3rd [Chapter 2] - オブジェクトの生成と消滅</title>
      <link>https://takuto-n.github.io/post/20190921-effective-java-3rd-2/</link>
      <pubDate>Sat, 21 Sep 2019 01:49:02 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20190921-effective-java-3rd-2/</guid>
      <description>&lt;h1 id=&#34;オブジェクトの生成と消滅&#34;&gt;オブジェクトの生成と消滅&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/Effective-Java-%E7%AC%AC3%E7%89%88-%E3%82%B8%E3%83%A7%E3%82%B7%E3%83%A5%E3%82%A2%E3%83%BB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF-ebook/dp/B07RHX1K53/ref=pd_sim_351_1/356-5415616-7898815?_encoding=UTF8&amp;amp;pd_rd_i=B07RHX1K53&amp;amp;pd_rd_r=383aeb39-63f8-4e11-8223-4445dcae3221&amp;amp;pd_rd_w=6vTRe&amp;amp;pd_rd_wg=Sdyd4&amp;amp;pf_rd_p=2e61d088-fdb1-443a-804b-afc322ee8b23&amp;amp;pf_rd_r=70HV42TR992CCFQP7KDA&amp;amp;psc=1&amp;amp;refRID=70HV42TR992CCFQP7KDA&#34;&gt;Effective Java 第 3 版&lt;/a&gt;の個人的メモ&lt;/p&gt;&#xA;&lt;!-- vscode-markdown-toc --&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#1static&#34;&gt;項目 1 コンストラクタの代わりに static ファクトリーメソッドを検討する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;項目 2 数多くのコンストラクタパラメータに直面した時にはビルダーパターンを検討する。&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#3privateenum&#34;&gt;項目 3 private のコンストラクタか enum 型でシングルトン特性を強制する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#4private&#34;&gt;項目 4 private のコンストラクタでインスタンス化不可能を強制する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#5&#34;&gt;項目 5 資源を直接結び付けるよりも依存性注入を選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#6&#34;&gt;項目 6 不必要なオブジェクトの生成を避ける&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#7&#34;&gt;項目 7 廃れたオブジェクト参照を取り除く&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#8finalizercleaner&#34;&gt;項目 8 finalizer と cleaner の使用は避けるべし&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#9try-finallytry-with-resources&#34;&gt;項目 9 try-finally よりも try-with-resources を使うべし&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- vscode-markdown-toc-config&#xA;&#x9;numbering=true&#xA;&#x9;autoSave=true&#xA;&#x9;/vscode-markdown-toc-config --&gt;&#xA;&lt;!-- /vscode-markdown-toc --&gt;&#xA;&lt;h2 id=&#34;1-項目-1-コンストラクタの代わりに-static-ファクトリーメソッドを検討する&#34;&gt;1. &lt;a name=&#39;1static&#39;&gt;&lt;/a&gt;項目 1 コンストラクタの代わりに static ファクトリーメソッドを検討する&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-結論&#34;&gt;1.1. &lt;a name=&#39;&#39;&gt;&lt;/a&gt;結論&lt;/h3&gt;&#xA;&lt;p&gt;コンストラクタの代わりに static ファクトリーメソッドを使用すると様々なメリットがある。&#xA;そのメリットが必要ない時はコンストラクタを使用すればよい。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
