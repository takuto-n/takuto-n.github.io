<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Little by little and bit by bit - マイペースにこつこつと</title>
    <link>https://takuto-n.github.io/</link>
    <description>Recent content on Little by little and bit by bit - マイペースにこつこつと</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <copyright>&lt;a href=&#34;https://www.instagram.com/takuto_no&#34;&gt;takuto-n&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 29 Jun 2025 23:33:44 +0900</lastBuildDate>
    <atom:link href="https://takuto-n.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About takuto_n</title>
      <link>https://takuto-n.github.io/about/about/</link>
      <pubDate>Thu, 12 Sep 2019 21:38:52 +0800</pubDate>
      <guid>https://takuto-n.github.io/about/about/</guid>
      <description>&lt;img src=&#34;https://takuto-n.github.io/img/lucky.JPG&#34; width=40%&gt;&#xA;&lt;p&gt;テニス・スノーボード、一眼レフが好きです。&lt;/p&gt;&#xA;&lt;p&gt;写真は&lt;a href=&#34;https://www.instagram.com/takuto_no/&#34;&gt;Instagram&lt;/a&gt;にアップロードしています。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;経歴&#34;&gt;経歴&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全国高校化学グランドコンテスト　金賞&lt;/li&gt;&#xA;&lt;li&gt;大阪教育大学　首席卒業&lt;/li&gt;&#xA;&lt;li&gt;奈良先端科学技術大学院大学　情報科学研究科　プログラミングコンテスト 2位&lt;/li&gt;&#xA;&lt;li&gt;某大手SIer勤務&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- &#xA;It makes use of a variety of open source projects including:&#xA;&#xA;* [Cobra](https://github.com/spf13/cobra)&#xA;* [Viper](https://github.com/spf13/viper)&#xA;* [J Walter Weatherman](https://github.com/spf13/jWalterWeatherman)&#xA;* [Cast](https://github.com/spf13/cast)&#xA;&#xA;Learn more and contribute on [GitHub](https://github.com/gohugoio).&#xA;--&gt;</description>
    </item>
    <item>
      <title>Decision Table - Typescript version</title>
      <link>https://takuto-n.github.io/post/20250629-decision-table-csharp/</link>
      <pubDate>Sun, 29 Jun 2025 23:33:44 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20250629-decision-table-csharp/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;C#でDecision Table(決定表) を作ってみたので、載せておきます。&lt;/p&gt;&#xA;&lt;p&gt;決定表は、「条件」と「その条件のときの値」を関連付けて定義できるユーティリティとして便利なのですが、なかなかライブラリとして世の中に転がっておらず、typescriptで以前作ったものをC#で書き換えました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using AWS Cognito with cognito-local and Java</title>
      <link>https://takuto-n.github.io/post/20250524-java-cognito-sample/</link>
      <pubDate>Sat, 24 May 2025 00:14:13 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20250524-java-cognito-sample/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;&#xA;&lt;p&gt;JavaでAWS Cognitoをローカルエミュレータ（cognito-local）上で使ってみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using AWS Secrets Manager with LocalStack and C#</title>
      <link>https://takuto-n.github.io/post/20250426-use-aws-secrets-manager/</link>
      <pubDate>Sat, 26 Apr 2025 21:53:49 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20250426-use-aws-secrets-manager/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;&#xA;&lt;p&gt;C#でAWS Secrets Managerをローカルエミュレータ（LocalStack）上で使ってみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rate Limiterについて調べてみた</title>
      <link>https://takuto-n.github.io/post/20240703-rate-limiter/</link>
      <pubDate>Wed, 03 Jul 2024 22:39:41 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20240703-rate-limiter/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;&#xA;&lt;p&gt;システムの安定運用に関するツールということで今回気になり調べてみました。&lt;/p&gt;&#xA;&lt;p&gt;レートリミッターは、システムの過負荷を防ぎ、安定したパフォーマンスを維持するためのツールです。一定の時間内に処理できるリクエストやタスクの数を制限することで、システムの信頼性と可用性を向上させることに寄与します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ターミナル上で過去に実行したコマンドを選択/実行する方法</title>
      <link>https://takuto-n.github.io/post/20230418-mac-peco-history-selection/</link>
      <pubDate>Tue, 18 Apr 2023 18:39:05 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20230418-mac-peco-history-selection/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;&#xA;&lt;p&gt;Windowsだと gitbash で ctrl + r でhistoryをもとに過去に実行したコマンドを選択/実行できます。&#xA;macでも同様に、gitbash で ctrl + rでhistoryをもとに過去に実行したコマンドを選択/実行する方法を調べたので、載せておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Typescript Object Extractor</title>
      <link>https://takuto-n.github.io/post/20220422-typescript-object-extractor/</link>
      <pubDate>Fri, 22 Apr 2022 22:56:30 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20220422-typescript-object-extractor/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;&#xA;&lt;p&gt;Typescriptで JSONオブジェクト から key-value 形式に変換するコードが必要で作ったので、載せておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mustache Option List</title>
      <link>https://takuto-n.github.io/post/20220422-mustache-option-list/</link>
      <pubDate>Fri, 22 Apr 2022 22:17:54 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20220422-mustache-option-list/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://openapi-generator.tech/docs/installation/&#34;&gt;OpenAPI Generator&lt;/a&gt; のコード生成をカスタマイズする際に、mustache構文で苦戦（どんなオプションを使えるのかがわからなかった。）したので、そのときに助かった方法をメモしておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Typescript Import順のソート</title>
      <link>https://takuto-n.github.io/post/20220422-typescript-import-order/</link>
      <pubDate>Fri, 22 Apr 2022 22:09:24 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20220422-typescript-import-order/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;Node.jsのプロジェクトで、import の順番をきれいにする(buildin, ライブラリ, 独自ライブラリの順にimportする)方法を調べたので、載せておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cookies from frontend to backend via BFF</title>
      <link>https://takuto-n.github.io/post/20220412-cookie-apollo-server/</link>
      <pubDate>Tue, 12 Apr 2022 14:46:25 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20220412-cookie-apollo-server/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;Cookie情報を、BFF(Backend for Frontend)で受け取って、Backend側へ送信するサンプルコードを載せておきます。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Request → (cookie) → BFF → (cookie) → Backend&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Proxy and certificate settings in NPM and Gradle</title>
      <link>https://takuto-n.github.io/post/20220412-set-proxy-and-cert/</link>
      <pubDate>Tue, 12 Apr 2022 09:12:02 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20220412-set-proxy-and-cert/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;インターネット接続に、証明書が必要な環境であったり、プロキシ設定が必要な環境の場合の&#xA;NPMやGradleの設定を載せておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Decision Table - Typescript version</title>
      <link>https://takuto-n.github.io/post/20220401-decision-table-typescript/</link>
      <pubDate>Fri, 01 Apr 2022 16:17:44 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20220401-decision-table-typescript/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;TypescriptでDecision Table(決定表) を作ってみたので、載せておきます。&lt;/p&gt;&#xA;&lt;p&gt;決定表は、「条件」と「その条件のときの値」を関連付けて定義できるユーティリティとして便利なのですが、なかなかライブラリとして世の中に転がっておらず、、今回自作してみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apollo Server Settings</title>
      <link>https://takuto-n.github.io/post/20220401-apollo-server-settings/</link>
      <pubDate>Fri, 01 Apr 2022 15:32:23 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20220401-apollo-server-settings/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;Apollo Server Express ( &lt;a href=&#34;https://www.npmjs.com/package/apollo-server-express&#34;&gt;apollo-server-express - npm&lt;/a&gt; ) を使ったサンプルアプリを作ってみました。&lt;/p&gt;&#xA;&lt;p&gt;以下のことを考慮しながら作ると少し躓いたので、この記事にまとめておきます。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;チュートリアル &lt;a href=&#34;https://www.apollographql.com/docs/apollo-server/getting-started&#34;&gt;Get started with Apollo Server - Apollo GraphQL Docs&lt;/a&gt; そのままに利用するだけだと、GraphQLのschema定義やresolverを1ファイルに記述することになり少し煩雑になってしまうので、きれいに分けたい。&lt;/li&gt;&#xA;&lt;li&gt;どうせならスキーマ定義と一緒にバリデーション定義も盛り込みたい。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Circuit Breaker Opossum</title>
      <link>https://takuto-n.github.io/post/20220323-circuit-breaker-opossum/</link>
      <pubDate>Wed, 23 Mar 2022 22:29:20 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20220323-circuit-breaker-opossum/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;Circuit Breaker( &lt;a href=&#34;https://www.npmjs.com/package/opossum&#34;&gt;opossum&lt;/a&gt; ) を使ってみたので、サーキットブレーカーの概要を説明した後、簡易実装サンプルとその実行結果について説明します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Node.js Import AbsolutePath</title>
      <link>https://takuto-n.github.io/post/20220204-node-import-absolute_path/</link>
      <pubDate>Fri, 04 Feb 2022 20:20:20 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20220204-node-import-absolute_path/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;Node.js(Typescript)でサーバーサイドアプリを作成する際に、絶対パスでimportするのに躓いたのでまとめておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>React Learning</title>
      <link>https://takuto-n.github.io/post/20220203-react-learning/</link>
      <pubDate>Thu, 03 Feb 2022 20:10:04 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20220203-react-learning/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;Reactの初学者として、2ヶ月ほど学習したので、学習を振り返って、どのコンテンツで学べばよかったのかをまとめておきます。(随時更新予定)&lt;/p&gt;</description>
    </item>
    <item>
      <title>OAuth2.0について</title>
      <link>https://takuto-n.github.io/post/20220118-oauth2/</link>
      <pubDate>Tue, 18 Jan 2022 21:38:05 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20220118-oauth2/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;OAuth2.0について学んだことをまとめておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>React Hooks</title>
      <link>https://takuto-n.github.io/post/20211227-react-hooks/</link>
      <pubDate>Mon, 27 Dec 2021 13:25:33 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20211227-react-hooks/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;ReactのHooksについて、基本的な内容をまとめたので載せておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GraphQL Language Specifications</title>
      <link>https://takuto-n.github.io/post/20211204-graphql-basic/</link>
      <pubDate>Sat, 04 Dec 2021 00:56:49 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20211204-graphql-basic/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;GraphQLの学習にて、基本的な言語仕様をまとめたので載せておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Storage and Compute Options on Google Cloud</title>
      <link>https://takuto-n.github.io/post/20210907-google-cloud-storage-and-compute/</link>
      <pubDate>Tue, 07 Sep 2021 20:03:30 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20210907-google-cloud-storage-and-compute/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;Google Cloudの学習にて、ストレージサービスおよびAppサービスについてまとめたので、載せておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第一回 アルゴリズム実技検定(AtCoder)</title>
      <link>https://takuto-n.github.io/post/20210315-at-coder/</link>
      <pubDate>Mon, 15 Mar 2021 22:00:01 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20210315-at-coder/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/past201912-open&#34;&gt;第一回 アルゴリズム実技検定 過去問 - AtCoder&lt;/a&gt; の問題AからHまでをJavaで解いてみました。（問題はAからOまでありますが。。。）&lt;/p&gt;&#xA;&lt;p&gt;また、より少ないコード量で、、というよりも、そこまで時間はかけずに、私なりに素直な考え方のコードで解きました。(少し冗長なところはありますが、ご了承ください。)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Springboot-App can create/replace Configmap.</title>
      <link>https://takuto-n.github.io/post/20210113-springboot-app-create-configmap/</link>
      <pubDate>Wed, 13 Jan 2021 19:35:35 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20210113-springboot-app-create-configmap/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;KubernetesのPod上で動作するSpringBootアプリケーションからConfigMapを変更することができたので、その方法をまとめておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Springboot-App can pulll the Configmap information.</title>
      <link>https://takuto-n.github.io/post/20210107-springboot-app-read-configmap/</link>
      <pubDate>Thu, 07 Jan 2021 18:00:01 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20210107-springboot-app-read-configmap/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;KubernetesのPod上で動作するSpringBootアプリケーションからConfigMapを取得しに行くことができたので、その方法をまとめておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exception Handling on SpringBoot</title>
      <link>https://takuto-n.github.io/post/20201222-spring-boot-exception-handler/</link>
      <pubDate>Tue, 22 Dec 2020 20:07:15 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20201222-spring-boot-exception-handler/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;The three methods of exception handling in SpringBoot are described below.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How to handle exceptions for each Controller&lt;/li&gt;&#xA;&lt;li&gt;How to handle exceptions across all Controllers&lt;/li&gt;&#xA;&lt;li&gt;How to handle exceptions by implementing ErrorController&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>動的プロパティの管理 on SpringBoot</title>
      <link>https://takuto-n.github.io/post/20201216-springboot-manage-property/</link>
      <pubDate>Wed, 16 Dec 2020 18:39:39 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20201216-springboot-manage-property/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;AP基盤/業務ロジック上で使用する静的プロパティを管理する方法としては、以下があるかと思います。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;applicaiton.properties にプロパティを記載する。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/context/properties/ConfigurationProperties.html&#34;&gt;@ConfigurationProperties&lt;/a&gt; を使って、オブジェクトにプロパティ値を読み込ませる。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;参考：&lt;a href=&#34;https://qiita.com/KevinFQ/items/bc5c3b7796bb72fa049c&#34;&gt;Spring Bootでプロパティファイルとのバインディング方法 - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;この記事では、AP基盤/業務ロジック上で使用する&lt;strong&gt;動的プロパティ&lt;/strong&gt;を&lt;code&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt;として管理する方法について記載したいと思います。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;参考：&lt;a href=&#34;https://qiita.com/kazuki43zoo/items/b9e07dc6c6d8a45485de&#34;&gt;Spring Frameworkで設定値(プロパティ値)をデータベースから取得する方法 - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Windowsでファイルリストを取得する方法</title>
      <link>https://takuto-n.github.io/post/20201110-windows-file-list/</link>
      <pubDate>Tue, 10 Nov 2020 19:37:47 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20201110-windows-file-list/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;&#xA;&lt;p&gt;あるディレクトリ配下のファイルリストを取得する際に、&lt;br&gt;&#xA;Linuxだと&lt;a href=&#34;https://linux.die.net/man/1/tree&#34;&gt;tree&lt;/a&gt;コマンドで可能です。&#xA;Windowsだとどうしたら良いのか調べたので、メモとして残しておきます。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;2022/4/1 追記&lt;br&gt;&#xA;フォルダリストの場合、コマンドプロンプトで &lt;code&gt;tree&lt;/code&gt; コマンドを使えばOK.&lt;br&gt;&#xA;ファイルリストの場合は、以下のpowershellでも可だが、&lt;code&gt;tree /f&lt;/code&gt; でもOK.&lt;br&gt;&#xA;参考：&lt;a href=&#34;https://docs.microsoft.com/ja-jp/windows-server/administration/windows-commands/tree&#34;&gt;tree | Microsoft Docs&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>AWS App Meshについて調べてみた</title>
      <link>https://takuto-n.github.io/post/20201103-aws-app-mesh/</link>
      <pubDate>Tue, 03 Nov 2020 15:10:12 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20201103-aws-app-mesh/</guid>
      <description>&lt;h1 id=&#34;aws-app-mesh&#34;&gt;AWS App Mesh&lt;/h1&gt;&#xA;&lt;p&gt;AWS App Meshについて概要をまとめて講義する場があったので、&lt;br&gt;&#xA;簡単にAWS Black Beltを参考にまとめました。&lt;/p&gt;&#xA;&lt;p&gt;AWS App Meshのリリース日：2019/3/27&lt;/p&gt;</description>
    </item>
    <item>
      <title>gRPC を使ってみた</title>
      <link>https://takuto-n.github.io/post/20201024-grpc-java/</link>
      <pubDate>Sat, 24 Oct 2020 18:36:47 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20201024-grpc-java/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;&#xA;&lt;p&gt;半年ほど前に &lt;a href=&#34;https://github.com/LogNet/grpc-spring-boot-starter&#34;&gt;Spring boot starter for gRPC framework&lt;/a&gt; を使う機会があったので、思い出しながらまとめておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenAPI Generatorを使ってみた</title>
      <link>https://takuto-n.github.io/post/20201024-openapi-java/</link>
      <pubDate>Sat, 24 Oct 2020 15:20:11 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20201024-openapi-java/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;&#xA;&lt;p&gt;半年ほど前に &lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator&#34;&gt;OpenAPI Generator&lt;/a&gt; を使う機会があったので、思い出しながらまとめておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dockerfile と マニフェストファイル(Deployment)</title>
      <link>https://takuto-n.github.io/post/20200701-dockerfile-and-manifest/</link>
      <pubDate>Wed, 01 Jul 2020 20:49:28 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20200701-dockerfile-and-manifest/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt; と &lt;code&gt;Manifest File ( kind: Deployment )&lt;/code&gt; を書く機会があったのでまとめておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jmeter Master-Slave構成</title>
      <link>https://takuto-n.github.io/post/20200614-jmeter-master-slave/</link>
      <pubDate>Sun, 14 Jun 2020 20:25:08 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20200614-jmeter-master-slave/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;legend&gt;Jmeter Master-Slave Overview&lt;/legend&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://takuto-n.github.io/img/20200614/jmeter-master-slave-on-aws.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Javaプロセスのメモリチェック方法</title>
      <link>https://takuto-n.github.io/post/20200502-memory-check-methods/</link>
      <pubDate>Sat, 02 May 2020 15:08:30 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20200502-memory-check-methods/</guid>
      <description>&lt;h1 id=&#34;概要&#34;&gt;概要&lt;/h1&gt;&#xA;&lt;p&gt;Javaプロセスのメモリ使用量をいろいろな方法で調査する機会あったので、まとめておきます。（内容としてはそれぞれあっさりです。）&lt;/p&gt;</description>
    </item>
    <item>
      <title>SpringBootアプリケーション起動直後にスレッドを初期化する方法②</title>
      <link>https://takuto-n.github.io/post/20200502-thread-init-at-process-startup2/</link>
      <pubDate>Sat, 02 May 2020 14:35:29 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20200502-thread-init-at-process-startup2/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;legend&gt;スレッド初期化のシーケンス図&lt;/legend&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://takuto-n.github.io/img/20200502/thread-init-flow.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>SpringBootアプリケーション起動直後にスレッドを初期化する方法</title>
      <link>https://takuto-n.github.io/post/20200425-thread-init-at-process-startup/</link>
      <pubDate>Sat, 25 Apr 2020 17:11:21 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20200425-thread-init-at-process-startup/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;legend&gt;スレッド初期化のシーケンス図&lt;/legend&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://takuto-n.github.io/img/20200425/thread-init-flow.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Kubernetes on GCP</title>
      <link>https://takuto-n.github.io/post/20200408-use-kubernetes-on-gcp/</link>
      <pubDate>Tue, 07 Apr 2020 20:56:51 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20200408-use-kubernetes-on-gcp/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://takuto-n.github.io/img/20200408/user-k8s-on-gcp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using JNR on Container</title>
      <link>https://takuto-n.github.io/post/20200407-jnr-on-docker/</link>
      <pubDate>Tue, 07 Apr 2020 16:16:55 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20200407-jnr-on-docker/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://takuto-n.github.io/img/20200407/using-jnr-on-docker.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Springboot on Container with jib</title>
      <link>https://takuto-n.github.io/post/20200405-docker-springboot_to_db/</link>
      <pubDate>Sun, 05 Apr 2020 15:55:57 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20200405-docker-springboot_to_db/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://takuto-n.github.io/img/20200405/docker-springboot_db.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Effective Java 3rd [Chapter 12] - シリアライズ</title>
      <link>https://takuto-n.github.io/post/20191109-effective-java-3rd-12/</link>
      <pubDate>Sat, 07 Mar 2020 00:49:15 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20191109-effective-java-3rd-12/</guid>
      <description>&lt;h1 id=&#34;シリアライズ&#34;&gt;シリアライズ&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/Effective-Java-%E7%AC%AC3%E7%89%88-%E3%82%B8%E3%83%A7%E3%82%B7%E3%83%A5%E3%82%A2%E3%83%BB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF-ebook/dp/B07RHX1K53/ref=pd_sim_351_1/356-5415616-7898815?_encoding=UTF8&amp;amp;pd_rd_i=B07RHX1K53&amp;amp;pd_rd_r=383aeb39-63f8-4e11-8223-4445dcae3221&amp;amp;pd_rd_w=6vTRe&amp;amp;pd_rd_wg=Sdyd4&amp;amp;pf_rd_p=2e61d088-fdb1-443a-804b-afc322ee8b23&amp;amp;pf_rd_r=70HV42TR992CCFQP7KDA&amp;amp;psc=1&amp;amp;refRID=70HV42TR992CCFQP7KDA&#34;&gt;Effective Java 第 3 版&lt;/a&gt;の個人的メモ&lt;/p&gt;&#xA;&lt;!-- vscode-markdown-toc --&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#85Java&#34;&gt;項目 85 Java のシリアライズよりも代替手段を選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#86Serializable&#34;&gt;項目 86 Serializable を細心の注意を払って実装する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#87&#34;&gt;項目 87 カスタムシリアライズ形式の使用を検討する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#88readObject&#34;&gt;項目 88 防御的に readObject メソッドを書く&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#89readResolveenum&#34;&gt;項目 89 インスタンス制御に対しては、readResolve より enum 型を選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#90&#34;&gt;項目 90 シリアライズされたインスタンスの代わりに、シリアライズ・プロキシを検討する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- vscode-markdown-toc-config&#xA;&#x9;numbering=true&#xA;&#x9;autoSave=true&#xA;&#x9;/vscode-markdown-toc-config --&gt;&#xA;&lt;!-- /vscode-markdown-toc --&gt;&#xA;&lt;h2 id=&#34;1-項目-85-java-のシリアライズよりも代替手段を選ぶ&#34;&gt;1. &lt;a name=&#39;85Java&#39;&gt;&lt;/a&gt;項目 85 Java のシリアライズよりも代替手段を選ぶ&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-結論&#34;&gt;1.1. &lt;a name=&#39;&#39;&gt;&lt;/a&gt;結論&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;シリアライズは使うべきでない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;シリアライズは脆弱でリモートコード実行(RCE)やDoS攻撃などの攻撃の弱点となってしまうから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;代替手段としてはJSONやProtobufなどのような他の手段を使うべし&#xA;&lt;ul&gt;&#xA;&lt;li&gt;データフォーマットが定まっていてシリアライズよりましだから？&#xA;&lt;ul&gt;&#xA;&lt;li&gt;XML bombもある。Jsonハイジャックもある。&lt;/li&gt;&#xA;&lt;li&gt;ユーザコードを叩くかどうかの違い？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;シリアライズが避けられない場合でも、信頼できないデータはデシリアライズするべきでない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;信頼できないデータは攻撃対象となっている可能性があるから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;シリアライズが避けられないかつ信頼できないデータをデシリアライズしなければならない場合は、フィルタリングをするべし&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;12-シリアライズの脆弱性&#34;&gt;1.2. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;シリアライズの脆弱性&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;シリアライズは脆弱である&#xA;&lt;ul&gt;&#xA;&lt;li&gt;理由&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://codezine.jp/article/detail/9150&#34;&gt;Apache Commons Collectionsの脆弱性解説 (1/3)：CodeZine（コードジン）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.tokumaru.org/2017/09/introduction-to-object-injection.html&#34;&gt;安全でないデシリアライゼーション(Insecure Deserialization)入門 | 徳丸浩の日記&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ガジェット、ガジェットチェーンによって任意のネイティブコードが実行できてしまうことがある&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Javaのシリアライズ可能な型を持つメソッドをガジェット、ガジェットの組み合わせをガジェットチェーンとよぶ&lt;/li&gt;&#xA;&lt;li&gt;実際にガジェットチェーンを用いて任意のネイティブコードが実行する実証実験された&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.trendmicro.co.jp/archives/12577&#34;&gt;主要Javaアプリケーションサーバに影響するJavaライブラリの脆弱性を正しく理解する | トレンドマイクロ セキュリティブログ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/frohoff/ysoserial&#34;&gt;GitHub - frohoff/ysoserial: A proof-of-concept tool for generating payloads that exploit unsafe Java object deserialization.&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring 4.1.4でも実証実験された&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;デシリアライゼーションボムによってDoS攻撃ができてしまうことがある&#xA;&lt;ul&gt;&#xA;&lt;li&gt;デシリアライゼーションボムは、インスタンスのディシリアライズをする場合に、そのフィールドや要素のハッシュコードを計算する必要があることを悪用して、例えば深い入れ子構造になっているHashSetインスタンスなどを作成してデシリアライズさせることで、莫大な計算時間を掛けさせる攻撃手法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;13-デシリアライズ時のフィルタリング&#34;&gt;1.3. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;デシリアライズ時のフィルタリング&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;デシリアライズ時のフィルタリングには&lt;a href=&#34;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/ObjectInputFilter.html&#34;&gt;ObjectInputFilter (Java SE 11 &amp;amp; JDK 11 )&lt;/a&gt;を使うべし&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ホワイトリスト&lt;/li&gt;&#xA;&lt;li&gt;Java 9から導入されたが、6,7,8にもバックポートされている&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/jp/news/2017/03/deserialise-filter-backport/&#34;&gt;オブジェクトのデシリアライゼーションフィルタがJava 9からバックポートされる&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;14-余談&#34;&gt;1.4. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;余談&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;シリアライズの扱いずらさ&#xA;&lt;ul&gt;&#xA;&lt;li&gt;送信元と送信先が同じオブジェクトを持たなければならない&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;どういう局面でシリアライズを使うでしょうか&#xA;&lt;ul&gt;&#xA;&lt;li&gt;セッション&lt;/li&gt;&#xA;&lt;li&gt;システム内通信&#xA;&lt;ul&gt;&#xA;&lt;li&gt;EJB(Enterprise Java Bean)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;EJBとは？という方は&lt;a href=&#34;https://www.atmarkit.co.jp/fjava/keyword/jkey/jkey03.html&#34;&gt;こちら&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-項目-86-serializable-を細心の注意を払って実装する&#34;&gt;2. &lt;a name=&#39;86Serializable&#39;&gt;&lt;/a&gt;項目 86 Serializable を細心の注意を払って実装する&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-結論&#34;&gt;2.1. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;結論&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Serializableインターフェースは軽く考えて実装するべきではない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;以下の3つのコストがかかってしまうから&#xA;&lt;ul&gt;&#xA;&lt;li&gt;リリース後のクラスの実装の変更に対する柔軟性の低下&lt;/li&gt;&#xA;&lt;li&gt;バグやセキュリティホールの可能性の増大&lt;/li&gt;&#xA;&lt;li&gt;テストの負荷の増大&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;継承するために設計されたクラスとインタフェースではSerializableを実装・拡張するべきでない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;サブクラスの実装に手間がかかるから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;22-serializable実装に伴う3つのコスト&#34;&gt;2.2. &lt;a name=&#39;Serializable3&#39;&gt;&lt;/a&gt;Serializable実装に伴う3つのコスト&lt;/h3&gt;&#xA;&lt;h4 id=&#34;221-リリース後のクラスの実装の変更に対する柔軟性の低下&#34;&gt;2.2.1. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;リリース後のクラスの実装の変更に対する柔軟性の低下&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Serializableを実装したクラスを一旦リリースしてしまうと、その実装を変更することは容易ではない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;クラスをシリアライズ可能にすると、そのシリアライズ形式がクラスの公開APIの一部となり、シリアライズ形式を永久にサポートし続ける必要があるから&#xA;&lt;ul&gt;&#xA;&lt;li&gt;デフォルトのシリアライズ形式の場合は、 privateフィールドも公開されてしまう&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;serialVersionUIDを明示的に指定しない場合は、コンパイラはクラス名やクラスが実装しているインタフェース名、publicとprotectedのメンバからserialVersionUIDを生成されるするので、メソッドを一つ追加しただけでserialVersionUIDが変更され、互換性が失われるから。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;javaバージョンによって生成されるserialVersionUIDが違う可能性あり。だから指定しましょう&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;222-バグやセキュリティホールの可能性の増大&#34;&gt;2.2.2. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;バグやセキュリティホールの可能性の増大&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;バグの可能性が増大する理由は、デシリアライズ時のオブジェクトは通常のコンストラクタを使わずに生成されるため、コンストラクタで保証される不変式が保証されないから。&lt;/li&gt;&#xA;&lt;li&gt;セキュリティホールについては、項目85参照&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;223-テストの負荷の増大&#34;&gt;2.2.3. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;テストの負荷の増大&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;新たなリリースのインスタンスをシリアライズし、古いリリースのデシリアライズ処理でインスタンスが復元できるを確認する必要がある。 また逆に、古いリリースのインスタンスをシリアライズし、新しいリリースのデシリアライズ処理で復元できるかも確認する必要がある&lt;/li&gt;&#xA;&lt;li&gt;これらのテストは、新旧のインスタンス間でシリアライズ/デシリアライズできるかというバイナリ互換性に加えて、 動作が意図しているものかどうかというセマンティクス互換性も検査する必要がある&#xA;&lt;ul&gt;&#xA;&lt;li&gt;互換の一覧&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ソース互換&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ソースをコンパイルできる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;バイナリ互換&#xA;&lt;ul&gt;&#xA;&lt;li&gt;バイナリを実行できる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;動作の互換性（≒セマンティクス互換性）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;動作が同じ&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;224-継承するために設計されたクラスインターフェースに対するserializable実装&#34;&gt;2.2.4. &lt;a name=&#39;Serializable&#39;&gt;&lt;/a&gt;継承するために設計されたクラス・インターフェースに対するSerializable実装&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;継承するために設計されたクラスとインタフェースではSerializableを実装・拡張するべきでない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;サブクラスの実装に手間がかかるから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ただし上記には例外があり、「例えば、全ての参加者がSerializableを実装しなければならない何らかのフレームワークに参加するためにクラスやインターフェースが主に存在している場合」は破ってもいい&#xA;&lt;ul&gt;&#xA;&lt;li&gt;例えば、ThrowableはSerializableを実装しているので、リモートメソッド呼び出し(RMI)からの例外を、クライアントに渡せる&lt;/li&gt;&#xA;&lt;li&gt;Component、HttpServletもSerializableを実装している&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-項目-87-カスタムシリアライズ形式の使用を検討する&#34;&gt;3. &lt;a name=&#39;87&#39;&gt;&lt;/a&gt;項目 87 カスタムシリアライズ形式の使用を検討する&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-結論&#34;&gt;3.1. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;結論&lt;/h3&gt;&#xA;&lt;p&gt;Javaにおけるシリアライズの実装方法は2通りある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Effective Java 3rd [Chapter 11] - 並行性</title>
      <link>https://takuto-n.github.io/post/20191109-effective-java-3rd-11/</link>
      <pubDate>Sat, 22 Feb 2020 00:49:04 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20191109-effective-java-3rd-11/</guid>
      <description>&lt;h1 id=&#34;並行性&#34;&gt;並行性&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/Effective-Java-%E7%AC%AC3%E7%89%88-%E3%82%B8%E3%83%A7%E3%82%B7%E3%83%A5%E3%82%A2%E3%83%BB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF-ebook/dp/B07RHX1K53/ref=pd_sim_351_1/356-5415616-7898815?_encoding=UTF8&amp;amp;pd_rd_i=B07RHX1K53&amp;amp;pd_rd_r=383aeb39-63f8-4e11-8223-4445dcae3221&amp;amp;pd_rd_w=6vTRe&amp;amp;pd_rd_wg=Sdyd4&amp;amp;pf_rd_p=2e61d088-fdb1-443a-804b-afc322ee8b23&amp;amp;pf_rd_r=70HV42TR992CCFQP7KDA&amp;amp;psc=1&amp;amp;refRID=70HV42TR992CCFQP7KDA&#34;&gt;Effective Java 第 3 版&lt;/a&gt;の個人的メモ&lt;/p&gt;&#xA;&lt;!-- vscode-markdown-toc --&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#78&#34;&gt;項目 78 共有された可変データへのアクセスを同期する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#79&#34;&gt;項目 79 過剰な同期は避ける&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#80&#34;&gt;項目 80 スレッドよりもエグゼキュータ、タスク、ストリームを選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#81waitnotify&#34;&gt;項目 81 wait と notify よりも並行処理ユーティリティを選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#82&#34;&gt;項目 82 スレッド安全性を文書化する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#83&#34;&gt;項目 83 遅延初期化を注意して使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#84&#34;&gt;項目 84 スレッドスケジューラに依存しない&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- vscode-markdown-toc-config&#xA;&#x9;numbering=true&#xA;&#x9;autoSave=true&#xA;&#x9;/vscode-markdown-toc-config --&gt;&#xA;&lt;!-- /vscode-markdown-toc --&gt;&#xA;&lt;h2 id=&#34;1-項目-78-共有された可変データへのアクセスを同期する&#34;&gt;1. &lt;a name=&#39;78&#39;&gt;&lt;/a&gt;項目 78 共有された可変データへのアクセスを同期する&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-結論&#34;&gt;1.1. &lt;a name=&#39;&#39;&gt;&lt;/a&gt;結論&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;synchronizedは同期化を行い、アトミック性と可視性を保証する&lt;/li&gt;&#xA;&lt;li&gt;複数スレッドが可変データを共有する場合には、そのデータを読み書きするスレッドは同期を行わなければならない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;同期を行わなければ、あるスレッドで行われた変更が他のスレッドから見えることが保証されないから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;volatileはアトミック性は保証しないが、可視性を保証する&lt;/li&gt;&#xA;&lt;li&gt;スレッド間通信だけが必要で、相互排他が必要なければ、volatileを使用できるが、正しく使うのは難しい&#xA;&lt;ul&gt;&#xA;&lt;li&gt;相互排他が必要かどうかを判断するのが難しいから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;可変データの共有はなるべく回避すべき&#xA;&lt;ul&gt;&#xA;&lt;li&gt;扱いが難しいから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;12-アトミック性&#34;&gt;1.2. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;アトミック性&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1つのスレッドだけがある時点で1つのメソッドやブロックを実行する性質&lt;/li&gt;&#xA;&lt;li&gt;下のようにsynchronizedを使うと、メソッドや処理をアトミックにできる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//アトミックな処理&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;13-可視性&#34;&gt;1.3. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;可視性&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;あるスレッドから変数に書き込んだ値が、別スレッドから観測できる性質&lt;/li&gt;&#xA;&lt;li&gt;下記のクラスのバックグラウンドスレッドは停止するか？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;StopThread1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stopRequested&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundThead&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stopRequested&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundThead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;SECONDS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stopRequested&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;バックグラウンドスレッドは無限ループする可能性がある&#xA;&lt;ul&gt;&#xA;&lt;li&gt;バックグラウンドスレッドからメインスレッドのbackgroundTheadに書き込んだ値が見えるかが保証されないから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;下記のクラスのバックグラウンドスレッドは停止するか？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;StopThread2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stopRequested&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;requestStop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stopRequested&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;stopRequested&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stopRequested&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundThead&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stopRequested&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundThead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;SECONDS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requestStop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;バックグラウンドスレッドは停止することが保証される&#xA;&lt;ul&gt;&#xA;&lt;li&gt;読み込み操作と書き込み操作の両方が同期されていて、バックグラウンドスレッドからメインスレッドのbackgroundTheadに書き込んだ値が見えることが保証されるから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;14-volatile&#34;&gt;1.4. &lt;a name=&#39;volatile&#39;&gt;&lt;/a&gt;volatile&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;volatileはアトミック性は保証しないが、可視性を保証する&lt;/li&gt;&#xA;&lt;li&gt;先ほどのStopThread2クラスはvolatileを使うことで、下記のようにより簡単なコードにできる&#xA;&lt;ul&gt;&#xA;&lt;li&gt;synchronizedを相互排他のためではなく、スレッド間通信のためだけにしようしているから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;StopThread3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stopRequested&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundThead&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stopRequested&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundThead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;SECONDS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stopRequested&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;volatileは「アトミックのように見えて実はアトミックではない」という操作に対して使わないようにする注意が必要&#xA;&lt;ul&gt;&#xA;&lt;li&gt;volatileはアトミック性を保証しないから&lt;/li&gt;&#xA;&lt;li&gt;例えば、下記のgenerateSerialNumber()を複数のスレッドから呼び出したら、違う値が帰ってくるか？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextSerialNumber&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;generateSerialNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextSerialNumber&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;違う値が帰ってくることは保証されない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;インクリメントは「アトミックに見えるが実はアトミックでない操作」だから。インクリメントは、値の読み出しと古い値に1を加えた値を書き戻す2つの操作を行う。スレッドが古い値を読み出して新たな値を書き戻す間に、別のスレッドがフィールドを読み出すと、最初のスレッドと同じ値が見えて、同じ値を返してしまう&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;nextSerialNumber + 1 はまずどこに書き込まれているか？&#xA;&lt;ul&gt;&#xA;&lt;li&gt;スタック上の一時領域&lt;/li&gt;&#xA;&lt;li&gt;メモリは参照と書き込みだけしかできない。計算できない。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;15-可変データの共有の回避&#34;&gt;1.5. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;可変データの共有の回避&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;今までの議論のように、可変データへの共有は難しいので、回避できるのであれば回避すべき&lt;/li&gt;&#xA;&lt;li&gt;回避には2つの方法がある&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不変データを共有する&lt;/li&gt;&#xA;&lt;li&gt;可変データを共有しない(可変データは単一スレッドで使う)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;上記の方針を採用した場合は文書化することが重要&#xA;&lt;ul&gt;&#xA;&lt;li&gt;プログラムが発展する際に方針が維持されるから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;AtomicBooleanのようなライブラリを使うと良い。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-項目-79-過剰な同期は避ける&#34;&gt;2. &lt;a name=&#39;79&#39;&gt;&lt;/a&gt;項目 79 過剰な同期は避ける&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-結論&#34;&gt;2.1. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;結論&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;同期された領域内では、できる限り少ない処理をするべき&#xA;&lt;ul&gt;&#xA;&lt;li&gt;デッドロックやデータ破壊、パフォーマンス低下の原因となるから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;22-過剰な同期によるエラーやデッドロック&#34;&gt;2.2. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;過剰な同期によるエラーやデッドロック&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;下記クラスObservableSetは要素が追加されたら任意の処理ができるSetであり、SetObserverインターフェースはObservableSetのObserverインターフェースである&lt;/p&gt;</description>
    </item>
    <item>
      <title>Effective Java 3rd [Chapter 10] - 例外</title>
      <link>https://takuto-n.github.io/post/20191109-effective-java-3rd-10/</link>
      <pubDate>Sat, 25 Jan 2020 00:49:01 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20191109-effective-java-3rd-10/</guid>
      <description>&lt;h1 id=&#34;例外&#34;&gt;例外&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/Effective-Java-%E7%AC%AC3%E7%89%88-%E3%82%B8%E3%83%A7%E3%82%B7%E3%83%A5%E3%82%A2%E3%83%BB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF-ebook/dp/B07RHX1K53/ref=pd_sim_351_1/356-5415616-7898815?_encoding=UTF8&amp;amp;pd_rd_i=B07RHX1K53&amp;amp;pd_rd_r=383aeb39-63f8-4e11-8223-4445dcae3221&amp;amp;pd_rd_w=6vTRe&amp;amp;pd_rd_wg=Sdyd4&amp;amp;pf_rd_p=2e61d088-fdb1-443a-804b-afc322ee8b23&amp;amp;pf_rd_r=70HV42TR992CCFQP7KDA&amp;amp;psc=1&amp;amp;refRID=70HV42TR992CCFQP7KDA&#34;&gt;Effective Java 第 3 版&lt;/a&gt;の個人的メモ&lt;/p&gt;&#xA;&lt;!-- vscode-markdown-toc --&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#69&#34;&gt;項目 69 例外的状態にだけ例外を使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#70&#34;&gt;項目 70 回復可能な状態にはチェックされる例外を、プログラミングエラーには実行時例外を使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#71&#34;&gt;項目 71 チェックされる例外を不必要に使うのを避ける&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#72&#34;&gt;項目 72 標準的な例外を使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#73&#34;&gt;項目 73 抽象概念に適した例外をスローする&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#74&#34;&gt;項目 74 各メソッドがスローするすべての例外を文書化する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#75&#34;&gt;項目 75 詳細メッセージにエラー記録情報を含める&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#76&#34;&gt;項目 76 エラーアトミック性に努める&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#77&#34;&gt;項目 77 例外を無視しない&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- vscode-markdown-toc-config&#xA;&#x9;numbering=true&#xA;&#x9;autoSave=true&#xA;&#x9;/vscode-markdown-toc-config --&gt;&#xA;&lt;!-- /vscode-markdown-toc --&gt;&#xA;&lt;h2 id=&#34;1-項目-69-例外的状態にだけ例外を使う&#34;&gt;1. &lt;a name=&#39;69&#39;&gt;&lt;/a&gt;項目 69 例外的状態にだけ例外を使う&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-結論&#34;&gt;1.1. &lt;a name=&#39;&#39;&gt;&lt;/a&gt;結論&lt;/h3&gt;&#xA;&lt;p&gt;例外をGOTO文のように、フロー制御に使ってはいけない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS CodeGuru</title>
      <link>https://takuto-n.github.io/post/20191224-awscodeguru/</link>
      <pubDate>Tue, 24 Dec 2019 23:36:29 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20191224-awscodeguru/</guid>
      <description>&lt;h1 id=&#34;aws-codeguruを使ってみた&#34;&gt;AWS CodeGuruを使ってみた&lt;/h1&gt;&#xA;&lt;p&gt;AWS re:Invent 2019で発表された機械学習を応用したソースコード解析ツール&lt;a href=&#34;https://aws.amazon.com/jp/codeguru/&#34;&gt;AWS CodeGuru&lt;/a&gt;を使ってみました。&#xA;その使用感や解析結果をまとめたいと思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Effective Java 3rd [Chapter 9] - プログラミング一般</title>
      <link>https://takuto-n.github.io/post/20191109-effective-java-3rd-9/</link>
      <pubDate>Tue, 24 Dec 2019 00:48:59 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20191109-effective-java-3rd-9/</guid>
      <description>&lt;h1 id=&#34;プログラミング一般&#34;&gt;プログラミング一般&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/Effective-Java-%E7%AC%AC3%E7%89%88-%E3%82%B8%E3%83%A7%E3%82%B7%E3%83%A5%E3%82%A2%E3%83%BB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF-ebook/dp/B07RHX1K53/ref=pd_sim_351_1/356-5415616-7898815?_encoding=UTF8&amp;amp;pd_rd_i=B07RHX1K53&amp;amp;pd_rd_r=383aeb39-63f8-4e11-8223-4445dcae3221&amp;amp;pd_rd_w=6vTRe&amp;amp;pd_rd_wg=Sdyd4&amp;amp;pf_rd_p=2e61d088-fdb1-443a-804b-afc322ee8b23&amp;amp;pf_rd_r=70HV42TR992CCFQP7KDA&amp;amp;psc=1&amp;amp;refRID=70HV42TR992CCFQP7KDA&#34;&gt;Effective Java 第 3 版&lt;/a&gt;の個人的メモ&lt;/p&gt;&#xA;&lt;!-- vscode-markdown-toc --&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#57&#34;&gt;項目 57 ローカル変数のスコープを最小限にする&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#58forfor-each&#34;&gt;項目 58 従来の for ループより for-each ループを選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#59&#34;&gt;項目 59 ライブラリを知り、ライブラリを使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#60floatdouble&#34;&gt;項目 60 正確な答えが必要ならば、float と double を避ける&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#61boxedprimitiveprimitive&#34;&gt;項目 61 ボクシングされたプリミティブ型（boxed primitive）より、プリミティブ型（primitive）を選択すべし&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#62&#34;&gt;項目 62 他の型が適切な場所では、文字列を避ける&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#63&#34;&gt;項目 63 文字列結合のパフォーマンスに用心する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#64&#34;&gt;項目 64 インタフェースでオブジェクトを参照する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#65&#34;&gt;項目 65 リフレクションよりもインタフェースを選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#66&#34;&gt;項目 66 ネイティブメソッドを注意して使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#67&#34;&gt;項目 67 注意して最適化する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#68&#34;&gt;項目 68 一般的に受け入れられている命名規約を守る&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#URL&#34;&gt;参考URL&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- vscode-markdown-toc-config&#xA;&#x9;numbering=true&#xA;&#x9;autoSave=true&#xA;&#x9;/vscode-markdown-toc-config --&gt;&#xA;&lt;!-- /vscode-markdown-toc --&gt;&#xA;&lt;h2 id=&#34;1-項目-57-ローカル変数のスコープを最小限にする&#34;&gt;1. &lt;a name=&#39;57&#39;&gt;&lt;/a&gt;項目 57 ローカル変数のスコープを最小限にする&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-結論&#34;&gt;1.1. &lt;a name=&#39;&#39;&gt;&lt;/a&gt;結論&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ローカル変数は初めて使用される時に宣言しましょう&#xA;&lt;ul&gt;&#xA;&lt;li&gt;かなり前段階で宣言されていると、その時点から変更されているかを確認する必要があるから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;（ほとんど）全てのローカル変数の宣言時には初期化しましょう&#xA;&lt;ul&gt;&#xA;&lt;li&gt;初期化するための情報がない段階で、宣言すべきではないから&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;メソッドを小さくして焦点をはっきりさせましょう&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1つのメソッド内で2つの処理があれば、1つ目の処理用のローカル変数が2つ目の処理にも使われているかもしれないので、これを防ぐために &lt;code&gt;1メソッド:1処理&lt;/code&gt; としましょう。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;12-サンプル&#34;&gt;1.2. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;サンプル&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 良い例&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Element&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 悪い例&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;While&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;While&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// バグ(iではなく、i2が正しい。)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;13-ポイント&#34;&gt;1.3. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;ポイント&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用される直前に、ローカル変数を初期化して宣言しましょう&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;1メソッド:1処理&lt;/code&gt;としましょう&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;備考：&lt;code&gt;while&lt;/code&gt;文ではなく&lt;code&gt;for&lt;/code&gt;文を好んで使いましょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Effective Java 3rd [Chapter 8] - メソッド</title>
      <link>https://takuto-n.github.io/post/20191109-effective-java-3rd-8/</link>
      <pubDate>Mon, 09 Dec 2019 00:48:57 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20191109-effective-java-3rd-8/</guid>
      <description>&lt;h1 id=&#34;メソッド&#34;&gt;メソッド&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/Effective-Java-%E7%AC%AC3%E7%89%88-%E3%82%B8%E3%83%A7%E3%82%B7%E3%83%A5%E3%82%A2%E3%83%BB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF-ebook/dp/B07RHX1K53/ref=pd_sim_351_1/356-5415616-7898815?_encoding=UTF8&amp;amp;pd_rd_i=B07RHX1K53&amp;amp;pd_rd_r=383aeb39-63f8-4e11-8223-4445dcae3221&amp;amp;pd_rd_w=6vTRe&amp;amp;pd_rd_wg=Sdyd4&amp;amp;pf_rd_p=2e61d088-fdb1-443a-804b-afc322ee8b23&amp;amp;pf_rd_r=70HV42TR992CCFQP7KDA&amp;amp;psc=1&amp;amp;refRID=70HV42TR992CCFQP7KDA&#34;&gt;Effective Java 第 3 版&lt;/a&gt;の個人的メモ&lt;/p&gt;&#xA;&lt;!-- vscode-markdown-toc --&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#49&#34;&gt;項目 49 パラメータの正当性を検査する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#50&#34;&gt;項目 50 必要な場合、防御的にコピーする&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#51&#34;&gt;項目 51 メソッドのシグネチャを注意深く設計する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#52&#34;&gt;項目 52 オーバーロードを注意して使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#53&#34;&gt;項目 53 可変長引数を注意して使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#54null&#34;&gt;項目 54 null ではなく、空コレクションか空配列を返す&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#55&#34;&gt;項目 55 オプショナルを注意して返す&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#56API&#34;&gt;項目 56 すべての公開 API 要素に対してドキュメントコメントを書く&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#URL&#34;&gt;参考URL&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- vscode-markdown-toc-config&#xA;&#x9;numbering=true&#xA;&#x9;autoSave=true&#xA;&#x9;/vscode-markdown-toc-config --&gt;&#xA;&lt;!-- /vscode-markdown-toc --&gt;&#xA;&lt;h2 id=&#34;1-項目-49-パラメータの正当性を検査する&#34;&gt;1. &lt;a name=&#39;49&#39;&gt;&lt;/a&gt;項目 49 パラメータの正当性を検査する&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-結論&#34;&gt;1.1. &lt;a name=&#39;&#39;&gt;&lt;/a&gt;結論&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;入力値のチェックをしましょう&lt;/li&gt;&#xA;&lt;li&gt;Javadocに入力値の説明と例外の説明は記入しましょう&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;12-良い例&#34;&gt;1.2. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;良い例&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;&#x9; * 値が(this mod m)であるBigIntegerを返します。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;&#x9; * このメソッドは、remainderメソッドとは異なり、&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;   * 常に負でないBigIntegerを返します。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;&#x9; * &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;&#x9; * @param m 正でなければならない&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;&#x9; * @return this mod m.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;&#x9; * @throws ArithmetricException m &amp;lt;= 0の場合.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;&#x9; */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BigInteger&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BigInteger&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;signum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ArithmeticException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Modulus &amp;lt;= 0: &amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 計算を行う&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;最初に入力値チェックをすることで、以下を防げる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Effective Java 3rd [Chapter 7] - ラムダ式とストリーム</title>
      <link>https://takuto-n.github.io/post/20191109-effective-java-3rd-7/</link>
      <pubDate>Mon, 25 Nov 2019 00:37:53 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20191109-effective-java-3rd-7/</guid>
      <description>&lt;h1 id=&#34;ラムダ式とストリーム&#34;&gt;ラムダ式とストリーム&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/Effective-Java-%E7%AC%AC3%E7%89%88-%E3%82%B8%E3%83%A7%E3%82%B7%E3%83%A5%E3%82%A2%E3%83%BB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF-ebook/dp/B07RHX1K53/ref=pd_sim_351_1/356-5415616-7898815?_encoding=UTF8&amp;amp;pd_rd_i=B07RHX1K53&amp;amp;pd_rd_r=383aeb39-63f8-4e11-8223-4445dcae3221&amp;amp;pd_rd_w=6vTRe&amp;amp;pd_rd_wg=Sdyd4&amp;amp;pf_rd_p=2e61d088-fdb1-443a-804b-afc322ee8b23&amp;amp;pf_rd_r=70HV42TR992CCFQP7KDA&amp;amp;psc=1&amp;amp;refRID=70HV42TR992CCFQP7KDA&#34;&gt;Effective Java 第 3 版&lt;/a&gt;の個人的メモ&lt;/p&gt;&#xA;&lt;!-- vscode-markdown-toc --&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#42&#34;&gt;項目 42 匿名クラスよりもラムダ式を選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#43&#34;&gt;項目 43 ラムダよりもメソッド参照を選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#44&#34;&gt;項目 44 標準の関数型インタフェースを使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#45&#34;&gt;項目 45 ストリームを注意して使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#46&#34;&gt;項目 46 ストリームで副作用のない関数を選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#47StreamCollection&#34;&gt;項目 47 戻り値型として Stream よりも Collection を選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#48&#34;&gt;項目 48 ストリームを並列化するときは注意を払う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#URL&#34;&gt;参考 URL&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- vscode-markdown-toc-config&#xA;&#x9;numbering=true&#xA;&#x9;autoSave=true&#xA;&#x9;/vscode-markdown-toc-config --&gt;&#xA;&lt;!-- /vscode-markdown-toc --&gt;&#xA;&lt;h1 id=&#34;effective-java-3rd-勉強会1129&#34;&gt;Effective Java 3rd 勉強会(11/29)&lt;/h1&gt;&#xA;&lt;p&gt;日時: 2019/11/29 14:00-14:45&#xA;参加者(敬称略): 則兼、岩崎、倉元&lt;br&gt;&#xA;以下、内容。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Effective Java 3rd [Chapter 6] - enum とアノテーション</title>
      <link>https://takuto-n.github.io/post/20191109-effective-java-3rd-6/</link>
      <pubDate>Sat, 09 Nov 2019 00:36:53 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20191109-effective-java-3rd-6/</guid>
      <description>&lt;h1 id=&#34;enum-とアノテーション&#34;&gt;enum とアノテーション&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/Effective-Java-%E7%AC%AC3%E7%89%88-%E3%82%B8%E3%83%A7%E3%82%B7%E3%83%A5%E3%82%A2%E3%83%BB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF-ebook/dp/B07RHX1K53/ref=pd_sim_351_1/356-5415616-7898815?_encoding=UTF8&amp;amp;pd_rd_i=B07RHX1K53&amp;amp;pd_rd_r=383aeb39-63f8-4e11-8223-4445dcae3221&amp;amp;pd_rd_w=6vTRe&amp;amp;pd_rd_wg=Sdyd4&amp;amp;pf_rd_p=2e61d088-fdb1-443a-804b-afc322ee8b23&amp;amp;pf_rd_r=70HV42TR992CCFQP7KDA&amp;amp;psc=1&amp;amp;refRID=70HV42TR992CCFQP7KDA&#34;&gt;Effective Java 第 3 版&lt;/a&gt;の個人的メモ&lt;/p&gt;&#xA;&lt;!-- vscode-markdown-toc --&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#34intenum&#34;&gt;項目 34 int 定数の代わりに enum を使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#35&#34;&gt;項目 35 序数の代わりにインスタンスフィールドを使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#36EnumSet&#34;&gt;項目 36 ビットフィールドの代わりに EnumSet を使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#37EnumMap&#34;&gt;項目 37 序数インデックスの代わりに EnumMap を使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#38enum&#34;&gt;項目 38 拡張可能な enum をインタフェースで模倣する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#39&#34;&gt;項目 39 命名パターンよりアノテーションを選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#40Override&#34;&gt;項目 40 常に Override アノテーションを使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#41&#34;&gt;項目 41 型を定義するためにマーカーインタフェースを使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- vscode-markdown-toc-config&#xA;&#x9;numbering=true&#xA;&#x9;autoSave=true&#xA;&#x9;/vscode-markdown-toc-config --&gt;&#xA;&lt;!-- /vscode-markdown-toc --&gt;&#xA;&lt;h2 id=&#34;1-項目-34-int-定数の代わりに-enum-を使う&#34;&gt;1. &lt;a name=&#39;34intenum&#39;&gt;&lt;/a&gt;項目 34 int 定数の代わりに enum を使う&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-結論&#34;&gt;1.1. &lt;a name=&#39;&#39;&gt;&lt;/a&gt;結論&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;int enum&lt;/code&gt;パターン(&lt;code&gt;int&lt;/code&gt;定数)は使わないでおきましょう。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;enum&lt;/code&gt;を使いましょう。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;単に定数として使う。&lt;/li&gt;&#xA;&lt;li&gt;定数に対するメソッドが必要であれば、定数固有メソッド&lt;/li&gt;&#xA;&lt;li&gt;複数の定数に対して共通のメソッドが必要であれば、戦略&lt;code&gt;enum&lt;/code&gt;パターン&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;12-int-enumパターンの欠点&#34;&gt;1.2. &lt;a name=&#39;intenum&#39;&gt;&lt;/a&gt;&lt;code&gt;int enum&lt;/code&gt;パターンの欠点&lt;/h3&gt;&#xA;&lt;p&gt;以下の欠点がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Effective Java 3rd [Chapter 5] - ジェネリクス</title>
      <link>https://takuto-n.github.io/post/20191103-effective-java-3rd-5/</link>
      <pubDate>Sun, 03 Nov 2019 00:07:19 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20191103-effective-java-3rd-5/</guid>
      <description>&lt;h1 id=&#34;ジェネリクス&#34;&gt;ジェネリクス&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/Effective-Java-%E7%AC%AC3%E7%89%88-%E3%82%B8%E3%83%A7%E3%82%B7%E3%83%A5%E3%82%A2%E3%83%BB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF-ebook/dp/B07RHX1K53/ref=pd_sim_351_1/356-5415616-7898815?_encoding=UTF8&amp;amp;pd_rd_i=B07RHX1K53&amp;amp;pd_rd_r=383aeb39-63f8-4e11-8223-4445dcae3221&amp;amp;pd_rd_w=6vTRe&amp;amp;pd_rd_wg=Sdyd4&amp;amp;pf_rd_p=2e61d088-fdb1-443a-804b-afc322ee8b23&amp;amp;pf_rd_r=70HV42TR992CCFQP7KDA&amp;amp;psc=1&amp;amp;refRID=70HV42TR992CCFQP7KDA&#34;&gt;Effective Java 第 3 版&lt;/a&gt;の個人的メモ&lt;/p&gt;&#xA;&lt;!-- vscode-markdown-toc --&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#26&#34;&gt;項目 26 原型を使わない&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#27&#34;&gt;項目 27 無検査警告を取り除く&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#28&#34;&gt;項目 28 配列よりリストを選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#29&#34;&gt;項目 29 ジェネリック型を使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#30&#34;&gt;項目 30 ジェネリックメソッドを使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#31API&#34;&gt;項目 31 API の柔軟性向上のために境界ワイルドカードを使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#32&#34;&gt;項目 32 ジェネリックと可変長引数を注意して組み合わせる&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#33&#34;&gt;項目 33 型安全な異種コンテナを検討する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#URL&#34;&gt;参考 URL&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- vscode-markdown-toc-config&#xA;&#x9;numbering=true&#xA;&#x9;autoSave=true&#xA;&#x9;/vscode-markdown-toc-config --&gt;&#xA;&lt;!-- /vscode-markdown-toc --&gt;&#xA;&lt;h2 id=&#34;1-項目-26-原型を使わない&#34;&gt;1. &lt;a name=&#39;26&#39;&gt;&lt;/a&gt;項目 26 原型を使わない&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Java 1.4 までジェネリクスがなかった。&lt;/li&gt;&#xA;&lt;li&gt;Java 5 でジェネリクスが登場した。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;11-結論&#34;&gt;1.1. &lt;a name=&#39;&#39;&gt;&lt;/a&gt;結論&lt;/h3&gt;&#xA;&lt;p&gt;ジェネリクスの型パラメータが指定できるときは必ず指定しましょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Effective Java 3rd [Chapter 4] - クラスとインタフェース</title>
      <link>https://takuto-n.github.io/post/20191006-effective-java-3rd-4/</link>
      <pubDate>Sun, 06 Oct 2019 15:27:10 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20191006-effective-java-3rd-4/</guid>
      <description>&lt;h1 id=&#34;クラスとインタフェース&#34;&gt;クラスとインタフェース&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/Effective-Java-%E7%AC%AC3%E7%89%88-%E3%82%B8%E3%83%A7%E3%82%B7%E3%83%A5%E3%82%A2%E3%83%BB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF-ebook/dp/B07RHX1K53/ref=pd_sim_351_1/356-5415616-7898815?_encoding=UTF8&amp;amp;pd_rd_i=B07RHX1K53&amp;amp;pd_rd_r=383aeb39-63f8-4e11-8223-4445dcae3221&amp;amp;pd_rd_w=6vTRe&amp;amp;pd_rd_wg=Sdyd4&amp;amp;pf_rd_p=2e61d088-fdb1-443a-804b-afc322ee8b23&amp;amp;pf_rd_r=70HV42TR992CCFQP7KDA&amp;amp;psc=1&amp;amp;refRID=70HV42TR992CCFQP7KDA&#34;&gt;Effective Java 第 3 版&lt;/a&gt;の個人的メモ&lt;/p&gt;&#xA;&lt;!-- vscode-markdown-toc --&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#15&#34;&gt;項目 15 クラスとメンバーへのアクセス可能性を最小限にする&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#16publicpublic&#34;&gt;項目 16 public のクラスでは、public のフィールドではなく、アクセッサーメソッドを使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#17&#34;&gt;項目 17 可変性を最小限にする&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#18&#34;&gt;項目 18 継承よりコンポジションを選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#19&#34;&gt;項目 19 継承のために設計および文書化する、でなければ継承を禁止する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#20&#34;&gt;項目 20 抽象クラスよりインタフェースを選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#21&#34;&gt;項目 21 将来のためにインタフェースを選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#22&#34;&gt;項目 22 型を定義するためだけにインタフェースを使う&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#23&#34;&gt;項目 23 タグ付クラスよりクラス階層を選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#24staticstatic&#34;&gt;項目 24 非 static のメンバークラスより static のメンバークラスを選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#25&#34;&gt;項目 25 ソースファイルを単一のトップレベルのクラスに限定する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#URL&#34;&gt;参考 URL&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- vscode-markdown-toc-config&#xA;&#x9;numbering=true&#xA;&#x9;autoSave=true&#xA;&#x9;/vscode-markdown-toc-config --&gt;&#xA;&lt;!-- /vscode-markdown-toc --&gt;&#xA;&lt;h2 id=&#34;1-項目-15-クラスとメンバーへのアクセス可能性を最小限にする&#34;&gt;1. &lt;a name=&#39;15&#39;&gt;&lt;/a&gt;項目 15 クラスとメンバーへのアクセス可能性を最小限にする&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-結論&#34;&gt;1.1. &lt;a name=&#39;&#39;&gt;&lt;/a&gt;結論&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常にアクセス可能性をできる限り小さくするべき&lt;/li&gt;&#xA;&lt;li&gt;public のクラスは public のフィールドを持つべきではない&lt;/li&gt;&#xA;&lt;li&gt;public static final のフィールドが配列の場合、その配列の内部も不変であることを保証するべき&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;12-常にアクセス可能性をできる限り小さくするべき&#34;&gt;1.2. &lt;a name=&#39;-1&#39;&gt;&lt;/a&gt;常にアクセス可能性をできる限り小さくするべき&lt;/h3&gt;&#xA;&lt;p&gt;情報秘匿(カプセル化)をすると以下の利点が得られるから。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Useful tools</title>
      <link>https://takuto-n.github.io/post/20190923-useful-tools/</link>
      <pubDate>Mon, 23 Sep 2019 15:55:16 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20190923-useful-tools/</guid>
      <description>&lt;p&gt;少しずつ便利だなぁと思ったものを追記していきます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;複数人でのドキュメント管理&#34;&gt;複数人でのドキュメント管理&lt;/h2&gt;&#xA;&lt;h3 id=&#34;結論&#34;&gt;結論&lt;/h3&gt;&#xA;&lt;p&gt;複数人でのドキュメント管理になると、このご時世 Git を使うのが基本かと思います。&#xA;(ファイルサーバなどは前のバージョンが管理しづらい。)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Effective Java 3rd [Chapter 3] - すべてのオブジェクトに共通のメソッド</title>
      <link>https://takuto-n.github.io/post/20190921-effective-java-3rd-3/</link>
      <pubDate>Sat, 21 Sep 2019 19:17:52 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20190921-effective-java-3rd-3/</guid>
      <description>&lt;h1 id=&#34;すべてのオブジェクトに共通のメソッド&#34;&gt;すべてのオブジェクトに共通のメソッド&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/Effective-Java-%E7%AC%AC3%E7%89%88-%E3%82%B8%E3%83%A7%E3%82%B7%E3%83%A5%E3%82%A2%E3%83%BB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF-ebook/dp/B07RHX1K53/ref=pd_sim_351_1/356-5415616-7898815?_encoding=UTF8&amp;amp;pd_rd_i=B07RHX1K53&amp;amp;pd_rd_r=383aeb39-63f8-4e11-8223-4445dcae3221&amp;amp;pd_rd_w=6vTRe&amp;amp;pd_rd_wg=Sdyd4&amp;amp;pf_rd_p=2e61d088-fdb1-443a-804b-afc322ee8b23&amp;amp;pf_rd_r=70HV42TR992CCFQP7KDA&amp;amp;psc=1&amp;amp;refRID=70HV42TR992CCFQP7KDA&#34;&gt;Effective Java 第 3 版&lt;/a&gt;の個人的メモ&lt;/p&gt;&#xA;&lt;!-- vscode-markdown-toc --&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#10equalsoverridegeneralcontracts&#34;&gt;項目 10 equals の override は一般契約（general contracts）に従うべし&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#11equalshashcode&#34;&gt;項目 11 equals をオーバーライドする場合は hashcode もオーバーライドせよ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#12toString&#34;&gt;項目 12 常に toString をオーバーライドせよ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#13clone&#34;&gt;項目 13 clone をオーバーライドするときは注意せよ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#14Comparable&#34;&gt;項目 14 Comparable を実装することを考慮せよ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- vscode-markdown-toc-config&#xA;&#x9;numbering=true&#xA;&#x9;autoSave=true&#xA;&#x9;/vscode-markdown-toc-config --&gt;&#xA;&lt;!-- /vscode-markdown-toc --&gt;&#xA;&lt;h2 id=&#34;1-項目-10-equals-の-override-は一般契約general-contractsに従うべし&#34;&gt;1. &lt;a name=&#39;10equalsoverridegeneralcontracts&#39;&gt;&lt;/a&gt;項目 10 equals の override は一般契約（general contracts）に従うべし&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-どういう時にオーバーライドする必要があるのか&#34;&gt;1.1. &lt;a name=&#39;&#39;&gt;&lt;/a&gt;どういう時にオーバーライドする必要があるのか？&lt;/h3&gt;&#xA;&lt;p&gt;&lt;em&gt;クラスが単なるオブジェクトの同一性とは異なる論理的等価性という概念を持っていて、他のインスタンスと比較する必要があるとき&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Effective Java 3rd [Chapter 2] - オブジェクトの生成と消滅</title>
      <link>https://takuto-n.github.io/post/20190921-effective-java-3rd-2/</link>
      <pubDate>Sat, 21 Sep 2019 01:49:02 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20190921-effective-java-3rd-2/</guid>
      <description>&lt;h1 id=&#34;オブジェクトの生成と消滅&#34;&gt;オブジェクトの生成と消滅&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/Effective-Java-%E7%AC%AC3%E7%89%88-%E3%82%B8%E3%83%A7%E3%82%B7%E3%83%A5%E3%82%A2%E3%83%BB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF-ebook/dp/B07RHX1K53/ref=pd_sim_351_1/356-5415616-7898815?_encoding=UTF8&amp;amp;pd_rd_i=B07RHX1K53&amp;amp;pd_rd_r=383aeb39-63f8-4e11-8223-4445dcae3221&amp;amp;pd_rd_w=6vTRe&amp;amp;pd_rd_wg=Sdyd4&amp;amp;pf_rd_p=2e61d088-fdb1-443a-804b-afc322ee8b23&amp;amp;pf_rd_r=70HV42TR992CCFQP7KDA&amp;amp;psc=1&amp;amp;refRID=70HV42TR992CCFQP7KDA&#34;&gt;Effective Java 第 3 版&lt;/a&gt;の個人的メモ&lt;/p&gt;&#xA;&lt;!-- vscode-markdown-toc --&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#1static&#34;&gt;項目 1 コンストラクタの代わりに static ファクトリーメソッドを検討する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;項目 2 数多くのコンストラクタパラメータに直面した時にはビルダーパターンを検討する。&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#3privateenum&#34;&gt;項目 3 private のコンストラクタか enum 型でシングルトン特性を強制する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#4private&#34;&gt;項目 4 private のコンストラクタでインスタンス化不可能を強制する&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#5&#34;&gt;項目 5 資源を直接結び付けるよりも依存性注入を選ぶ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#6&#34;&gt;項目 6 不必要なオブジェクトの生成を避ける&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#7&#34;&gt;項目 7 廃れたオブジェクト参照を取り除く&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#8finalizercleaner&#34;&gt;項目 8 finalizer と cleaner の使用は避けるべし&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#9try-finallytry-with-resources&#34;&gt;項目 9 try-finally よりも try-with-resources を使うべし&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- vscode-markdown-toc-config&#xA;&#x9;numbering=true&#xA;&#x9;autoSave=true&#xA;&#x9;/vscode-markdown-toc-config --&gt;&#xA;&lt;!-- /vscode-markdown-toc --&gt;&#xA;&lt;h2 id=&#34;1-項目-1-コンストラクタの代わりに-static-ファクトリーメソッドを検討する&#34;&gt;1. &lt;a name=&#39;1static&#39;&gt;&lt;/a&gt;項目 1 コンストラクタの代わりに static ファクトリーメソッドを検討する&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-結論&#34;&gt;1.1. &lt;a name=&#39;&#39;&gt;&lt;/a&gt;結論&lt;/h3&gt;&#xA;&lt;p&gt;コンストラクタの代わりに static ファクトリーメソッドを使用すると様々なメリットがある。&#xA;そのメリットが必要ない時はコンストラクタを使用すればよい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS CodebuildからMattermostへの通知</title>
      <link>https://takuto-n.github.io/post/20190914-codebuild_mattermost/</link>
      <pubDate>Sat, 14 Sep 2019 12:09:20 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20190914-codebuild_mattermost/</guid>
      <description>&lt;p&gt;AWS CodeBuild から Mattermost へ通知させる機会があったので、その方法についての備忘録として残しておきます。&lt;/p&gt;&#xA;&lt;p&gt;AWS CodeBuild の環境変数 &lt;code&gt;MattermostWebhookURL&lt;/code&gt; に&lt;code&gt;Mattermost&lt;/code&gt;の&lt;code&gt;Incomming Webhook URL&lt;/code&gt;を保持しておきます。また、IAM から CodeBuild のロールに &lt;code&gt;AmazonSSMReadOnlyAccess&lt;/code&gt;の権限を与えてください。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS CodeBuildとSonarCloudの連携方法</title>
      <link>https://takuto-n.github.io/post/20190909-sonarcloud_codebuild/</link>
      <pubDate>Mon, 09 Sep 2019 02:37:45 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20190909-sonarcloud_codebuild/</guid>
      <description>&lt;p&gt;AWS CodeBuild と SonarCloud を連携させる機会があったので、その方法についての備忘録として残しておきます。&lt;/p&gt;&#xA;&lt;p&gt;AWS CodeBuild の環境変数 &lt;code&gt;SonarCloudAccessToken&lt;/code&gt; に SonarCloud のアクセストークンを保持しておきます。&lt;/p&gt;&#xA;&lt;p&gt;SonarCloud のアクセストークンの発行は、SonarCloud のサイトで &lt;code&gt;ユーザーアイコン &amp;gt; Settings &amp;gt; Personal access token&lt;/code&gt; から出来ます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Architecting on AWSの参加メモ</title>
      <link>https://takuto-n.github.io/post/20190809-architectiong-on-aws_memo/</link>
      <pubDate>Fri, 09 Aug 2019 00:01:44 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20190809-architectiong-on-aws_memo/</guid>
      <description>&lt;p&gt;先日、Architecting on AWS に参加したので、&lt;a href=&#34;https://drive.google.com/file/d/1UVGxRcfKq2XBBWpN66b8ZQjJuyXirCkH/preview&#34;&gt;参加メモ&lt;/a&gt;を載せておきます。&lt;/p&gt;&#xA;&lt;p&gt;クラウド繋がりということで、Cloud Native Tokyo 2019 で紹介されていた&lt;a href=&#34;https://drive.google.com/file/d/1kNd9Au2vWr5H1T-Bmz957qdLl_SV5aa4/preview&#34;&gt;Trail Map&lt;/a&gt;も載せておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>クロスドメイン制約とBASIC認証</title>
      <link>https://takuto-n.github.io/post/20190316-cors-basic_auth/</link>
      <pubDate>Sat, 16 Mar 2019 23:09:42 +0900</pubDate>
      <guid>https://takuto-n.github.io/post/20190316-cors-basic_auth/</guid>
      <description>&lt;p&gt;初めての技術系ブログです。&lt;/p&gt;&#xA;&lt;p&gt;ご不明な点がありましたら、お気軽にコメント欄へ記入ください。&lt;/p&gt;&#xA;&lt;p&gt;初回は「&lt;strong&gt;ドメイン X のサイトから、異なるドメイン Y の BASIC 認証つきのサイトにアクセスできるのか&lt;/strong&gt; 」について検証した結果を書きたいと思います。&#xA;検証結果としては、&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
