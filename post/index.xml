<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Little by little and bit by bit - マイペースにこつこつと</title>
    <link>https://takuto-n.github.io/post/</link>
    <description>Recent content in Posts on Little by little and bit by bit - マイペースにこつこつと</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>&lt;a href=&#34;https://www.instagram.com/takuto_no&#34;&gt;takuto-n&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 12 Apr 2022 14:46:25 +0900</lastBuildDate><atom:link href="https://takuto-n.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cookies from frontend to backend via BFF</title>
      <link>https://takuto-n.github.io/post/20220412-cookie-apollo-server/</link>
      <pubDate>Tue, 12 Apr 2022 14:46:25 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20220412-cookie-apollo-server/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;Cookie情報を、BFF(Backend for Frontend)で受け取って、Backend側へ送信するサンプルコードを載せておきます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Request → (cookie) → BFF → (cookie) → Backend&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Proxy and certificate settings in NPM and Gradle</title>
      <link>https://takuto-n.github.io/post/20220412-set-proxy-and-cert/</link>
      <pubDate>Tue, 12 Apr 2022 09:12:02 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20220412-set-proxy-and-cert/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;インターネット接続に、証明書が必要な環境であったり、プロキシ設定が必要な環境の場合の
NPMやGradleの設定を載せておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Decision Table - Typescript version</title>
      <link>https://takuto-n.github.io/post/20220401-decision-table-typescript/</link>
      <pubDate>Fri, 01 Apr 2022 16:17:44 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20220401-decision-table-typescript/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;TypescriptでDecision Table(決定表) を作ってみたので、載せておきます。&lt;/p&gt;
&lt;p&gt;決定表は、「条件」と「その条件のときの値」を関連付けて定義できるユーティリティとして便利なのですが、なかなかライブラリとして世の中に転がっておらず、、今回自作してみました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Apollo Server Settings</title>
      <link>https://takuto-n.github.io/post/20220401-apollo-server-settings/</link>
      <pubDate>Fri, 01 Apr 2022 15:32:23 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20220401-apollo-server-settings/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;Apollo Server Express ( &lt;a href=&#34;https://www.npmjs.com/package/apollo-server-express&#34;&gt;apollo-server-express - npm&lt;/a&gt; ) を使ったサンプルアプリを作ってみました。&lt;/p&gt;
&lt;p&gt;以下のことを考慮しながら作ると少し躓いたので、この記事にまとめておきます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;チュートリアル &lt;a href=&#34;https://www.apollographql.com/docs/apollo-server/getting-started&#34;&gt;Get started with Apollo Server - Apollo GraphQL Docs&lt;/a&gt; そのままに利用するだけだと、GraphQLのschema定義やresolverを1ファイルに記述することになり少し煩雑になってしまうので、きれいに分けたい。&lt;/li&gt;
&lt;li&gt;どうせならスキーマ定義と一緒にバリデーション定義も盛り込みたい。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Circuit Breaker Opossum</title>
      <link>https://takuto-n.github.io/post/20220323-circuit-breaker-opossum/</link>
      <pubDate>Wed, 23 Mar 2022 22:29:20 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20220323-circuit-breaker-opossum/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;Circuit Breaker( &lt;a href=&#34;https://www.npmjs.com/package/opossum&#34;&gt;opossum&lt;/a&gt; ) を使ってみたので、サーキットブレーカーの概要を説明した後、簡易実装サンプルとその実行結果について説明します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node.js Import AbsolutePath</title>
      <link>https://takuto-n.github.io/post/20220204-node-import-absolute_path/</link>
      <pubDate>Fri, 04 Feb 2022 20:20:20 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20220204-node-import-absolute_path/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;Node.js(Typescript)でサーバーサイドアプリを作成する際に、絶対パスでimportするのに躓いたのでまとめておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>React Learning</title>
      <link>https://takuto-n.github.io/post/20220203-react-learning/</link>
      <pubDate>Thu, 03 Feb 2022 20:10:04 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20220203-react-learning/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;Reactの初学者として、2ヶ月ほど学習したので、学習を振り返って、どのコンテンツで学べばよかったのかをまとめておきます。(随時更新予定)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OAuth2.0について</title>
      <link>https://takuto-n.github.io/post/20220118-oauth2/</link>
      <pubDate>Tue, 18 Jan 2022 21:38:05 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20220118-oauth2/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;OAuth2.0について学んだことをまとめておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>React Hooks</title>
      <link>https://takuto-n.github.io/post/20211227-react-hooks/</link>
      <pubDate>Mon, 27 Dec 2021 13:25:33 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20211227-react-hooks/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;ReactのHooksについて、基本的な内容をまとめたので載せておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GraphQL Language Specifications</title>
      <link>https://takuto-n.github.io/post/20211204-graphql-basic/</link>
      <pubDate>Sat, 04 Dec 2021 00:56:49 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20211204-graphql-basic/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;GraphQLの学習にて、基本的な言語仕様をまとめたので載せておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Storage and Compute Options on Google Cloud</title>
      <link>https://takuto-n.github.io/post/20210907-google-cloud-storage-and-compute/</link>
      <pubDate>Tue, 07 Sep 2021 20:03:30 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20210907-google-cloud-storage-and-compute/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;Google Cloudの学習にて、ストレージサービスおよびAppサービスについてまとめたので、載せておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>第一回 アルゴリズム実技検定(AtCoder)</title>
      <link>https://takuto-n.github.io/post/20210315-at-coder/</link>
      <pubDate>Mon, 15 Mar 2021 22:00:01 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20210315-at-coder/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/past201912-open&#34;&gt;第一回 アルゴリズム実技検定 過去問 - AtCoder&lt;/a&gt; の問題AからHまでをJavaで解いてみました。（問題はAからOまでありますが。。。）&lt;/p&gt;
&lt;p&gt;また、より少ないコード量で、、というよりも、そこまで時間はかけずに、私なりに素直な考え方のコードで解きました。(少し冗長なところはありますが、ご了承ください。)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Springboot-App can create/replace Configmap.</title>
      <link>https://takuto-n.github.io/post/20210113-springboot-app-create-configmap/</link>
      <pubDate>Wed, 13 Jan 2021 19:35:35 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20210113-springboot-app-create-configmap/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;KubernetesのPod上で動作するSpringBootアプリケーションからConfigMapを変更することができたので、その方法をまとめておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Springboot-App can pulll the Configmap information.</title>
      <link>https://takuto-n.github.io/post/20210107-springboot-app-read-configmap/</link>
      <pubDate>Thu, 07 Jan 2021 18:00:01 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20210107-springboot-app-read-configmap/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;KubernetesのPod上で動作するSpringBootアプリケーションからConfigMapを取得しに行くことができたので、その方法をまとめておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exception Handling on SpringBoot</title>
      <link>https://takuto-n.github.io/post/20201222-spring-boot-exception-handler/</link>
      <pubDate>Tue, 22 Dec 2020 20:07:15 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20201222-spring-boot-exception-handler/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;The three methods of exception handling in SpringBoot are described below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to handle exceptions for each Controller&lt;/li&gt;
&lt;li&gt;How to handle exceptions across all Controllers&lt;/li&gt;
&lt;li&gt;How to handle exceptions by implementing ErrorController&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>動的プロパティの管理 on SpringBoot</title>
      <link>https://takuto-n.github.io/post/20201216-springboot-manage-property/</link>
      <pubDate>Wed, 16 Dec 2020 18:39:39 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20201216-springboot-manage-property/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;AP基盤/業務ロジック上で使用する静的プロパティを管理する方法としては、以下があるかと思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;applicaiton.properties にプロパティを記載する。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/context/properties/ConfigurationProperties.html&#34;&gt;@ConfigurationProperties&lt;/a&gt; を使って、オブジェクトにプロパティ値を読み込ませる。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://qiita.com/KevinFQ/items/bc5c3b7796bb72fa049c&#34;&gt;Spring Bootでプロパティファイルとのバインディング方法 - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;この記事では、AP基盤/業務ロジック上で使用する&lt;strong&gt;動的プロパティ&lt;/strong&gt;を&lt;code&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt;として管理する方法について記載したいと思います。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://qiita.com/kazuki43zoo/items/b9e07dc6c6d8a45485de&#34;&gt;Spring Frameworkで設定値(プロパティ値)をデータベースから取得する方法 - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Windowsでファイルリストを取得する方法</title>
      <link>https://takuto-n.github.io/post/20201110-windows-file-list/</link>
      <pubDate>Tue, 10 Nov 2020 19:37:47 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20201110-windows-file-list/</guid>
      <description>&lt;h1 id=&#34;abstruct&#34;&gt;Abstruct&lt;/h1&gt;
&lt;p&gt;あるディレクトリ配下のファイルリストを取得する際に、&lt;br&gt;
Linuxだと&lt;a href=&#34;https://linux.die.net/man/1/tree&#34;&gt;tree&lt;/a&gt;コマンドで可能です。
Windowsだとどうしたら良いのか調べたので、メモとして残しておきます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2022/4/1 追記&lt;br&gt;
フォルダリストの場合、コマンドプロンプトで &lt;code&gt;tree&lt;/code&gt; コマンドを使えばOK.&lt;br&gt;
ファイルリストの場合は、以下のpowershellでも可だが、&lt;code&gt;tree /f&lt;/code&gt; でもOK.&lt;br&gt;
参考：&lt;a href=&#34;https://docs.microsoft.com/ja-jp/windows-server/administration/windows-commands/tree&#34;&gt;tree | Microsoft Docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AWS App Meshについて調べてみた</title>
      <link>https://takuto-n.github.io/post/20201103-aws-app-mesh/</link>
      <pubDate>Tue, 03 Nov 2020 15:10:12 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20201103-aws-app-mesh/</guid>
      <description>&lt;h1 id=&#34;aws-app-mesh&#34;&gt;AWS App Mesh&lt;/h1&gt;
&lt;p&gt;AWS App Meshについて概要をまとめて講義する場があったので、&lt;br&gt;
簡単にAWS Black Beltを参考にまとめました。&lt;/p&gt;
&lt;p&gt;AWS App Meshのリリース日：2019/3/27&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gRPC を使ってみた</title>
      <link>https://takuto-n.github.io/post/20201024-grpc-java/</link>
      <pubDate>Sat, 24 Oct 2020 18:36:47 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20201024-grpc-java/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;半年ほど前に &lt;a href=&#34;https://github.com/LogNet/grpc-spring-boot-starter&#34;&gt;Spring boot starter for gRPC framework&lt;/a&gt; を使う機会があったので、思い出しながらまとめておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenAPI Generatorを使ってみた</title>
      <link>https://takuto-n.github.io/post/20201024-openapi-java/</link>
      <pubDate>Sat, 24 Oct 2020 15:20:11 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20201024-openapi-java/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;半年ほど前に &lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator&#34;&gt;OpenAPI Generator&lt;/a&gt; を使う機会があったので、思い出しながらまとめておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dockerfile と マニフェストファイル(Deployment)</title>
      <link>https://takuto-n.github.io/post/20200701-dockerfile-and-manifest/</link>
      <pubDate>Wed, 01 Jul 2020 20:49:28 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20200701-dockerfile-and-manifest/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt; と &lt;code&gt;Manifest File ( kind: Deployment )&lt;/code&gt; を書く機会があったのでまとめておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jmeter Master-Slave構成</title>
      <link>https://takuto-n.github.io/post/20200614-jmeter-master-slave/</link>
      <pubDate>Sun, 14 Jun 2020 20:25:08 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20200614-jmeter-master-slave/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;legend&gt;Jmeter Master-Slave Overview&lt;/legend&gt;
&lt;p&gt;&lt;img src=&#34;https://takuto-n.github.io/img/20200614/jmeter-master-slave-on-aws.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Javaプロセスのメモリチェック方法</title>
      <link>https://takuto-n.github.io/post/20200502-memory-check-methods/</link>
      <pubDate>Sat, 02 May 2020 15:08:30 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20200502-memory-check-methods/</guid>
      <description>&lt;h1 id=&#34;概要&#34;&gt;概要&lt;/h1&gt;
&lt;p&gt;Javaプロセスのメモリ使用量をいろいろな方法で調査する機会あったので、まとめておきます。（内容としてはそれぞれあっさりです。）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SpringBootアプリケーション起動直後にスレッドを初期化する方法②</title>
      <link>https://takuto-n.github.io/post/20200502-thread-init-at-process-startup2/</link>
      <pubDate>Sat, 02 May 2020 14:35:29 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20200502-thread-init-at-process-startup2/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;legend&gt;スレッド初期化のシーケンス図&lt;/legend&gt;
&lt;p&gt;&lt;img src=&#34;https://takuto-n.github.io/img/20200502/thread-init-flow.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SpringBootアプリケーション起動直後にスレッドを初期化する方法</title>
      <link>https://takuto-n.github.io/post/20200425-thread-init-at-process-startup/</link>
      <pubDate>Sat, 25 Apr 2020 17:11:21 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20200425-thread-init-at-process-startup/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;legend&gt;スレッド初期化のシーケンス図&lt;/legend&gt;
&lt;p&gt;&lt;img src=&#34;https://takuto-n.github.io/img/20200425/thread-init-flow.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Kubernetes on GCP</title>
      <link>https://takuto-n.github.io/post/20200408-use-kubernetes-on-gcp/</link>
      <pubDate>Tue, 07 Apr 2020 20:56:51 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20200408-use-kubernetes-on-gcp/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://takuto-n.github.io/img/20200408/user-k8s-on-gcp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using JNR on Container</title>
      <link>https://takuto-n.github.io/post/20200407-jnr-on-docker/</link>
      <pubDate>Tue, 07 Apr 2020 16:16:55 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20200407-jnr-on-docker/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://takuto-n.github.io/img/20200407/using-jnr-on-docker.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Springboot on Container with jib</title>
      <link>https://takuto-n.github.io/post/20200405-docker-springboot_to_db/</link>
      <pubDate>Sun, 05 Apr 2020 15:55:57 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20200405-docker-springboot_to_db/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://takuto-n.github.io/img/20200405/docker-springboot_db.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Effective Java 3rd [Chapter 12] - シリアライズ</title>
      <link>https://takuto-n.github.io/post/20191109-effective-java-3rd-12/</link>
      <pubDate>Sat, 07 Mar 2020 00:49:15 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20191109-effective-java-3rd-12/</guid>
      <description>シリアライズ Effective Java 第 3 版の個人的メモ 項目 85 Java のシリアライズよりも代替手段を選ぶ 項目 86 Serializable を細心の注意を払って実装する 項目 87 カスタムシリアライズ形</description>
    </item>
    
    <item>
      <title>Effective Java 3rd [Chapter 11] - 並行性</title>
      <link>https://takuto-n.github.io/post/20191109-effective-java-3rd-11/</link>
      <pubDate>Sat, 22 Feb 2020 00:49:04 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20191109-effective-java-3rd-11/</guid>
      <description>並行性 Effective Java 第 3 版の個人的メモ 項目 78 共有された可変データへのアクセスを同期する 項目 79 過剰な同期は避ける 項目 80 スレッドよりもエグゼキュータ、タス</description>
    </item>
    
    <item>
      <title>Effective Java 3rd [Chapter 10] - 例外</title>
      <link>https://takuto-n.github.io/post/20191109-effective-java-3rd-10/</link>
      <pubDate>Sat, 25 Jan 2020 00:49:01 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20191109-effective-java-3rd-10/</guid>
      <description>例外 Effective Java 第 3 版の個人的メモ 項目 69 例外的状態にだけ例外を使う 項目 70 回復可能な状態にはチェックされる例外を、プログラミングエラーには実行時例外を</description>
    </item>
    
    <item>
      <title>AWS CodeGuru</title>
      <link>https://takuto-n.github.io/post/20191224-awscodeguru/</link>
      <pubDate>Tue, 24 Dec 2019 23:36:29 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20191224-awscodeguru/</guid>
      <description>AWS CodeGuruを使ってみた AWS re:Invent 2019で発表された機械学習を応用したソースコード解析ツールAWS CodeGuruを使ってみました。 その使</description>
    </item>
    
    <item>
      <title>Effective Java 3rd [Chapter 9] - プログラミング一般</title>
      <link>https://takuto-n.github.io/post/20191109-effective-java-3rd-9/</link>
      <pubDate>Tue, 24 Dec 2019 00:48:59 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20191109-effective-java-3rd-9/</guid>
      <description>プログラミング一般 Effective Java 第 3 版の個人的メモ 項目 57 ローカル変数のスコープを最小限にする 項目 58 従来の for ループより for-each ループを選ぶ 項目 59 ライブラリを知</description>
    </item>
    
    <item>
      <title>Effective Java 3rd [Chapter 8] - メソッド</title>
      <link>https://takuto-n.github.io/post/20191109-effective-java-3rd-8/</link>
      <pubDate>Mon, 09 Dec 2019 00:48:57 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20191109-effective-java-3rd-8/</guid>
      <description>メソッド Effective Java 第 3 版の個人的メモ 項目 49 パラメータの正当性を検査する 項目 50 必要な場合、防御的にコピーする 項目 51 メソッドのシグネチャを注意深く設計</description>
    </item>
    
    <item>
      <title>Effective Java 3rd [Chapter 7] - ラムダ式とストリーム</title>
      <link>https://takuto-n.github.io/post/20191109-effective-java-3rd-7/</link>
      <pubDate>Mon, 25 Nov 2019 00:37:53 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20191109-effective-java-3rd-7/</guid>
      <description>ラムダ式とストリーム Effective Java 第 3 版の個人的メモ 項目 42 匿名クラスよりもラムダ式を選ぶ 項目 43 ラムダよりもメソッド参照を選ぶ 項目 44 標準の関数型インタフ</description>
    </item>
    
    <item>
      <title>Effective Java 3rd [Chapter 6] - enum とアノテーション</title>
      <link>https://takuto-n.github.io/post/20191109-effective-java-3rd-6/</link>
      <pubDate>Sat, 09 Nov 2019 00:36:53 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20191109-effective-java-3rd-6/</guid>
      <description>enum とアノテーション Effective Java 第 3 版の個人的メモ 項目 34 int 定数の代わりに enum を使う 項目 35 序数の代わりにインスタンスフィールドを使う 項目 36 ビットフィールド</description>
    </item>
    
    <item>
      <title>Effective Java 3rd [Chapter 5] - ジェネリクス</title>
      <link>https://takuto-n.github.io/post/20191103-effective-java-3rd-5/</link>
      <pubDate>Sun, 03 Nov 2019 00:07:19 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20191103-effective-java-3rd-5/</guid>
      <description>ジェネリクス Effective Java 第 3 版の個人的メモ 項目 26 原型を使わない 項目 27 無検査警告を取り除く 項目 28 配列よりリストを選ぶ 項目 29 ジェネリック型を使う 項目 30 ジ</description>
    </item>
    
    <item>
      <title>Effective Java 3rd [Chapter 4] - クラスとインタフェース</title>
      <link>https://takuto-n.github.io/post/20191006-effective-java-3rd-4/</link>
      <pubDate>Sun, 06 Oct 2019 15:27:10 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20191006-effective-java-3rd-4/</guid>
      <description>クラスとインタフェース Effective Java 第 3 版の個人的メモ 項目 15 クラスとメンバーへのアクセス可能性を最小限にする 項目 16 public のクラスでは、public のフィー</description>
    </item>
    
    <item>
      <title>Useful tools</title>
      <link>https://takuto-n.github.io/post/20190923-useful-tools/</link>
      <pubDate>Mon, 23 Sep 2019 15:55:16 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20190923-useful-tools/</guid>
      <description>少しずつ便利だなぁと思ったものを追記していきます。 複数人でのドキュメント管理 結論 複数人でのドキュメント管理になると、このご時世 Git を使うのが基</description>
    </item>
    
    <item>
      <title>Effective Java 3rd [Chapter 3] - すべてのオブジェクトに共通のメソッド</title>
      <link>https://takuto-n.github.io/post/20190921-effective-java-3rd-3/</link>
      <pubDate>Sat, 21 Sep 2019 19:17:52 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20190921-effective-java-3rd-3/</guid>
      <description>すべてのオブジェクトに共通のメソッド Effective Java 第 3 版の個人的メモ 項目 10 equals の override は一般契約（general contracts）に従うべし 項目 11 equals をオー</description>
    </item>
    
    <item>
      <title>Effective Java 3rd [Chapter 2] - オブジェクトの生成と消滅</title>
      <link>https://takuto-n.github.io/post/20190921-effective-java-3rd-2/</link>
      <pubDate>Sat, 21 Sep 2019 01:49:02 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20190921-effective-java-3rd-2/</guid>
      <description>オブジェクトの生成と消滅 Effective Java 第 3 版の個人的メモ 項目 1 コンストラクタの代わりに static ファクトリーメソッドを検討する 項目 2 数多くのコンストラクタパラ</description>
    </item>
    
    <item>
      <title>AWS CodebuildからMattermostへの通知</title>
      <link>https://takuto-n.github.io/post/20190914-codebuild_mattermost/</link>
      <pubDate>Sat, 14 Sep 2019 12:09:20 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20190914-codebuild_mattermost/</guid>
      <description>AWS CodeBuild から Mattermost へ通知させる機会があったので、その方法についての備忘録として残しておきます。 AWS CodeBuild の環境変数 MattermostWebhookURL にMattermostのIncommi</description>
    </item>
    
    <item>
      <title>AWS CodeBuildとSonarCloudの連携方法</title>
      <link>https://takuto-n.github.io/post/20190909-sonarcloud_codebuild/</link>
      <pubDate>Mon, 09 Sep 2019 02:37:45 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20190909-sonarcloud_codebuild/</guid>
      <description>AWS CodeBuild と SonarCloud を連携させる機会があったので、その方法についての備忘録として残しておきます。 AWS CodeBuild の環境変数 SonarCloudAccessToken に SonarCloud のアクセストークンを保持しておきます</description>
    </item>
    
    <item>
      <title>Architecting on AWSの参加メモ</title>
      <link>https://takuto-n.github.io/post/20190809-architectiong-on-aws_memo/</link>
      <pubDate>Fri, 09 Aug 2019 00:01:44 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20190809-architectiong-on-aws_memo/</guid>
      <description>先日、Architecting on AWS に参加したので、参加メモを載せておきます。 クラウド繋がりということで、Cloud Native Tokyo 2019 で紹介されていたTr</description>
    </item>
    
    <item>
      <title>クロスドメイン制約とBASIC認証</title>
      <link>https://takuto-n.github.io/post/20190316-cors-basic_auth/</link>
      <pubDate>Sat, 16 Mar 2019 23:09:42 +0900</pubDate>
      
      <guid>https://takuto-n.github.io/post/20190316-cors-basic_auth/</guid>
      <description>初めての技術系ブログです。 ご不明な点がありましたら、お気軽にコメント欄へ記入ください。 初回は「ドメイン X のサイトから、異なるドメイン Y の BASIC 認</description>
    </item>
    
  </channel>
</rss>
